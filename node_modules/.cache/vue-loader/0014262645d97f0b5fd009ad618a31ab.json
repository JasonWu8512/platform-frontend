{"remainingRequest":"/Users/jlglqa/Documents/QA/noa/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/jlglqa/Documents/QA/noa/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/jlglqa/Documents/QA/noa/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jlglqa/Documents/QA/noa/src/pages/track/plan/view/comonents/report/components/BaseInfo.vue?vue&type=template&id=347222b0&scoped=true&","dependencies":[{"path":"/Users/jlglqa/Documents/QA/noa/src/pages/track/plan/view/comonents/report/components/BaseInfo.vue","mtime":1655949681805},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/cache-loader/dist/cjs.js","mtime":1644298102062},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1644314988580},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/cache-loader/dist/cjs.js","mtime":1644298102062},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/vue-loader/lib/index.js","mtime":1644314988580}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}