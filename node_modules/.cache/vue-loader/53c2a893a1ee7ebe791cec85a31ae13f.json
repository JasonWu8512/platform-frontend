{"remainingRequest":"/Users/jlglqa/Documents/QA/noa/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jlglqa/Documents/QA/noa/src/pages/track/case/components/TestCaseList.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Users/jlglqa/Documents/QA/noa/src/pages/track/case/components/TestCaseList.vue","mtime":1656380838880},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/cache-loader/dist/cjs.js","mtime":1644298102062},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/babel-loader/lib/index.js","mtime":1644314985388},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/ts-loader/index.js","mtime":1644314987889},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/cache-loader/dist/cjs.js","mtime":1644298102062},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/vue-loader/lib/index.js","mtime":1644314988580}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["TestCaseList.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsfile":"TestCaseList.vue","sourceRoot":"src/pages/track/case/components","sourcesContent":["<template>\n  <div>\n    <el-card class=\"card-content\">\n      <template slot=\"header\">\n        <table-header\n          :condition=\"condition\"\n          :show-create=\"selectNode.id !== undefined\"\n          :show-run=\"selectNode.id !== undefined\"\n          create-tip=\"新建用例\"\n          icon-run=\"el-icon-download\"\n          run-tip=\"导入用例\"\n          @create=\"testCaseModify\"\n          @runTest=\"handleUpload\"\n          @search=\"handleSearch\"\n        >\n          <template slot=\"title\">\n            <node-breadcrumb :nodes=\"selectParentNodes\" @refresh=\"refresh\"/>\n          </template>\n        </table-header>\n\n      </template>\n      <el-table\n        ref=\"table\"\n        :data=\"tableData\"\n        class=\"test-content adjust-table\"\n        row-key=\"id\"\n        @select=\"handleSelectionChange\"\n        @filter-change=\"filter\"\n        @select-all=\"handleSelectAll\"\n      >\n\n        <!--  复选框  -->\n        <el-table-column type=\"selection\"/>\n\n        <!--  复选按钮 -->\n        <el-table-column :resizable=\"false\" align=\"center\" width=\"40\">\n          <template slot-scope=\"scope\">\n            <show-more-btn\n              :buttons=\"buttons\"\n              :is-disabled=\"scope.row.isDisabled\"\n              :size=\"selectRows.size\"\n            />\n          </template>\n        </el-table-column>\n\n        <!--  名称  -->\n        <el-table-column label=\"名称\" prop=\"name\" show-overflow-tooltip>\n          <template slot-scope=\"scope\">\n            <el-popover placement=\"right-end\" title=\"查看用例\" width=\"60%\" @show=\"handleShow\">\n              <test-case-detail :condition=\"condition\" :form=\"scope.row\" :read-only=\"readOnly\"/>\n              <span slot=\"reference\">{{ scope.row.name }}</span>\n            </el-popover>\n          </template>\n        </el-table-column>\n\n        <!--  用例等级  -->\n        <el-table-column\n          :filters=\"priorityOptions\"\n          column-key=\"importance\"\n          label=\"用例等级\"\n          prop=\"importance\"\n          show-overflow-tooltip\n        >\n          <template slot-scope=\"scope\">\n            <priority-table-item :value=\"scope.row.importance\"/>\n          </template>\n        </el-table-column>\n\n        <!--  类型  -->\n        <el-table-column\n          column-key=\"caseType\"\n          label=\"类型\"\n          prop=\"caseType\"\n          show-overflow-tooltip\n        >\n          <template slot-scope=\"scope\">\n            <case-type-table-item :value=\"scope.row.caseType\"/>\n          </template>\n        </el-table-column>\n\n        <!--  测试方式  -->\n        <el-table-column\n          column-key=\"executionType\"\n          label=\"测试方式\"\n          prop=\"executionType\"\n          show-overflow-tooltip\n        >\n          <template slot-scope=\"scope\">\n            <execution-type-table-item :value=\"scope.row.executionType\"/>\n          </template>\n        </el-table-column>\n\n        <!--  评审状态  -->\n        <el-table-column :filters=\"statusOptions\" column-key=\"status\" label=\"评审状态\">\n          <template slot-scope=\"scope\">\n            <review-case-status-table-item :value=\"scope.row.status\"/>\n          </template>\n        </el-table-column>\n\n        <!--  所属模块  -->\n        <el-table-column label=\"所属模块\" prop=\"treePath\" show-overflow-tooltip/>\n\n        <!--  更新时间  -->\n        <el-table-column\n          :width=\"tableTimeWidth\"\n          label=\"更新时间\"\n          prop=\"updatedAt\"\n          show-overflow-tooltip\n          sortable\n        />\n\n        <!--  操作  -->\n        <el-table-column :width=\"table3BtnWidth\" label=\"操作\">\n          <template slot-scope=\"scope\">\n            <table-operator\n              show-copy\n              show-delete\n              show-edit\n              @copyClick=\"testCaseModify(scope.row, true)\"\n              @deleteClick=\"handleDelete(scope.row)\"\n              @editClick=\"testCaseModify(scope.row)\"\n            />\n          </template>\n        </el-table-column>\n      </el-table>\n\n      <table-pagination\n        :change=\"initTableData\"\n        :current-page.sync=\"currentPage\"\n        :page-size.sync=\"pageSize\"\n        :total=\"total\"\n      />\n\n    </el-card>\n\n    <batch-edit\n      ref=\"batchEdit\"\n      :type-arr=\"caseBatchEditOptions\"\n      :value-arr=\"batchEditValueArr\"\n      dialog-title=\"批量编辑用例\"\n      @batchEdit=\"batchEdit\"\n    />\n\n    <batch-move ref=\"batchMove\" @batchMove=\"batchMove\" @refresh=\"refresh\"/>\n\n  </div>\n</template>\n\n<script lang=\"ts\">\n\nimport {testCaseApi} from \"@/api\"\nimport {RequestGetTestCaseList, RequestUpdateTestCaseBatch, UpdateTestCaseParams} from \"@/api/types/testTrack\"\nimport {typeCaseData} from \"@/api/types/testTrackType\"\nimport variables from \"@/assets/css/utils.scss\"\nimport TablePagination from \"@/common/components/pagination/TablePagination.vue\"\nimport TableHeader from \"@/common/components/TableHeader.vue\"\nimport TableOperator from \"@/common/components/TableOperator.vue\"\nimport {_filter, formatTime} from \"@/common/utils\"\nimport {PAGINATION_SIZE} from \"@/constant\"\nimport {\n  caseBatchEditEnum,\n  caseBatchEditType,\n  caseTypeType,\n  caseUpdateTypeEnum,\n  executionType,\n  priorityType,\n} from \"@/constant/TestCase\"\nimport {reviewCaseStatusType} from \"@/constant/TestReivew\"\nimport BatchEdit from \"@/pages/track/case/components/BatchEdit.vue\"\nimport BatchMove from \"@/pages/track/case/components/BatchMove.vue\"\nimport ShowMoreBtn from \"@/pages/track/case/components/ShowMoreBtn.vue\"\nimport TestCaseDetail from \"@/pages/track/case/components/TestCaseDetail.vue\"\nimport NodeBreadcrumb from \"@/pages/track/common/NodeBreadcrumb.vue\"\nimport CaseTypeTableItem from \"@/pages/track/common/tableItems/CaseTypeTableItem.vue\"\nimport ExecutionTypeTableItem from \"@/pages/track/common/tableItems/ExecutionTypeTableItem.vue\"\nimport PriorityTableItem from \"@/pages/track/common/tableItems/PriorityTableItem.vue\"\nimport ReviewCaseStatusTableItem from \"@/pages/track/common/tableItems/ReviewCaseStatusTableItem.vue\"\nimport {getModuleByTreeId, getModuleOptions} from \"@/pages/track/common/utils\"\n\n// 执行方式\nconst executionOptions = Object.entries(executionType).map(([value, text]) => {\n  return {text: text, value: value}\n})\n// 用例优先级\nconst priorityOptions = Object.entries(priorityType).map(([value, text]) => {\n  return {text: text, value: value}\n})\n// 评审状态\nconst statusOptions = Object.entries(reviewCaseStatusType).map(([value, text]) => {\n  return {text: text, value: value}\n})\n// 用例类型\nconst caseTypeOptions = Object.entries(caseTypeType).map(([value, text]) => {\n  return {text: text, value: value}\n})\n// 批量编辑类型\nconst caseBatchEditOptions = Object.entries(caseBatchEditType).map(([value, text]) => {\n  return {text: text, value: value}\n})\n\nexport default {\n  name: \"TestCaseList\",\n  components: {\n    ReviewCaseStatusTableItem,\n    ExecutionTypeTableItem,\n    CaseTypeTableItem,\n    TestCaseDetail,\n    TableOperator,\n    PriorityTableItem,\n    TablePagination,\n    NodeBreadcrumb,\n    TableHeader,\n    ShowMoreBtn,\n    BatchEdit,\n    BatchMove,\n  },\n  data() {\n    return {\n      executionOptions: executionOptions,\n      priorityOptions: priorityOptions,\n      statusOptions: statusOptions,\n      caseTypeOptions: caseTypeOptions,\n      tableData: [],\n      currentPage: 1,\n      pageSize: PAGINATION_SIZE.LARGE,\n      total: 0,\n      selectRows: new Set(),\n      isDisabled: true,\n      caseFilter: {},\n      buttons: [\n        {name: '批量编辑用例', handleClick: this.handleBatchEdit},\n        {name: '批量移动用例', handleClick: this.handleBatchMove},\n        {name: '批量删除用例', handleClick: this.handleDeleteBatch}\n      ],\n      caseBatchEditOptions: caseBatchEditOptions,\n      batchEditValueArr: {\n        // 优先级\n        priority: priorityOptions,\n        // 用例类型\n        caseType: caseTypeOptions,\n        // 执行方式\n        method: executionOptions,\n        // 维护人\n        maintainer: [],\n      },\n    }\n  },\n  props: {\n    currentProject: Object,\n    treeNodes: Array,\n    selectNode: Object,\n    selectParentNodes: Array,\n    condition: Object,\n    readOnly: Boolean,\n  },\n  computed: {\n    caseIds() {\n      return Array.from(this.selectRows).map((row: { id: string }) => row.id)\n    },\n    table3BtnWidth() {\n      return variables['table3BtnWidth']\n    },\n    tableTimeWidth() {\n      return variables['tableTimeWidth']\n    },\n    loading() {\n      return this.$store.state.loading\n    },\n  },\n  inject: ['users'],\n  methods: {\n    setSelectOptions() {\n      this.setModuleOptions()\n      this.setMaintainerOptions()\n      this.condition.executionOptions = this.executionOptions\n      this.condition.priorityOptions = this.priorityOptions\n      this.condition.caseTypeOptions = this.caseTypeOptions\n      this.$emit(\"update:condition\", this.condition)\n    },\n    initTableData() {\n      this.setSelectOptions()\n      this.getData()\n    },\n    getData(value?: string) {\n      let params: RequestGetTestCaseList = {\n        offset: this.pageSize * (this.currentPage - 1),\n        limit: this.pageSize,\n        name: value,\n        treeId: this.selectNode.id,\n        projId: this.selectNode.id ? undefined : this.currentProject.id,\n      }\n\n      this.caseFilter = sessionStorage.getItem(this.$route.path)\n      this.caseFilter = this.caseFilter ? JSON.parse(this.caseFilter) : {}\n      if (JSON.stringify(this.caseFilter) !== \"{}\") {\n        Object.assign(params, this.caseFilter)\n        this.$refs.table.columns.forEach((item: any) => {\n          item.filteredValue = this.caseFilter[item.columnKey]\n        })\n      }\n\n      testCaseApi.getTestCaseList(params)\n        .then(({data}) => {\n          this.total = data.total\n          this.tableData = data.data\n          this.tableData.forEach((item: any) => {\n            item.updatedAt = formatTime(item.updatedAt)\n            item.treePath = getModuleByTreeId(this.treeNodes, item.treeId).path\n          })\n        })\n    },\n    handleSearch(value?: string) {\n      // console.log('handleSearch', value)\n      this.currentPage = 1\n      this.getData(value)\n    },\n    testCaseModify(testCase?: typeCaseData, isCopy?: boolean) {\n      if (this.treeNodes.length < 1) {\n        this.$message.warning('请先新建模块')\n        return\n      }\n      this.$eventBus.$emit(\"testCaseAddOrEditOrCopy\", testCase, isCopy)\n      this.$emit(\"update:readOnly\", false)\n    },\n    handleShow() {\n      this.$emit(\"update:readOnly\", true)\n    },\n    handleDelete(testCase: any) {\n      this.$alert(`确认删除测试用例'${testCase.name}'？删除后评审及测试计划关联的用例均会被删除。`, '', {\n        confirmButtonText: '确定',\n        showCancelButton: true,\n        cancelButtonText: '取消',\n        callback: (action: string) => {\n          if (action === 'confirm') {\n            testCaseApi.updateTestCase(testCase.id, {type: caseUpdateTypeEnum.DELETE})\n              .then(() => {\n                this.refresh()\n              })\n          }\n        }\n      })\n    },\n    handleDeleteBatch() {\n      this.$alert('确认删除测试用例？删除后评审及测试计划关联的用例均会被删除。', '', {\n        confirmButtonText: '确定',\n        showCancelButton: true,\n        cancelButtonText: '取消',\n        callback: (action: string) => {\n          if (action === 'confirm') {\n            const body: RequestUpdateTestCaseBatch = {\n              caseIds: this.caseIds,\n              type: caseUpdateTypeEnum.DELETE,\n            }\n            testCaseApi.updateTestCaseBatch(body)\n              .then(() => {\n                this.refresh()\n              })\n          }\n        }\n      })\n    },\n    refresh() {\n      this.$emit(\"refresh\")\n    },\n    handleSelectAll(selection: Object[]) {\n      if (selection.length > 0) {\n        this.tableData.forEach((item: any) => {\n          this.$set(item, \"isDisabled\", false)\n        })\n        this.selectRows = new Set(selection)\n      } else {\n        this.selectRows.clear()\n        this.tableData.forEach((row: any) => {\n          this.$set(row, \"isDisabled\", true)\n        })\n      }\n    },\n    handleSelectionChange(selection: Object[], row: any) {\n      if (selection.indexOf(row) === -1) {\n        this.$set(row, \"isDisabled\", true)\n      } else {\n        this.$set(row, \"isDisabled\", false)\n      }\n      this.selectRows = new Set(selection)\n    },\n    handleUpload() {\n      this.$eventBus.$emit('TestCaseImport')\n    },\n    batchEdit(editForm: any) {\n      let _case: UpdateTestCaseParams = {}\n      if (editForm.type === caseBatchEditEnum.PRIORITY) {\n        _case = Object.assign({importance: parseInt(editForm.value)}, _case)\n      } else if (editForm.type === caseBatchEditEnum.CASE_TYPE) {\n        _case = Object.assign({caseType: editForm.value}, _case)\n      } else if (editForm.type === caseBatchEditEnum.MAINTAINER) {\n        _case = Object.assign({qa: editForm.value}, _case)\n      } else if (editForm.type === caseBatchEditEnum.METHOD) {\n        _case = Object.assign({executionType: parseInt(editForm.value)}, _case)\n      }\n      const body: RequestUpdateTestCaseBatch = {\n        caseIds: this.caseIds,\n        type: caseUpdateTypeEnum.UPDATE_CASE,\n        case: _case\n      }\n      testCaseApi.updateTestCaseBatch(body)\n        .then(() => {\n          this.refresh()\n        })\n    },\n    batchMove(nodeId: string) {\n      const _case: UpdateTestCaseParams = {treeId: nodeId}\n      const body = {\n        caseIds: this.caseIds,\n        type: caseUpdateTypeEnum.UPDATE_CASE,\n        case: _case\n      }\n      testCaseApi.updateTestCaseBatch(body)\n        .then(() => {\n          this.refresh()\n        })\n    },\n    filter(filters: any) {\n      this.currentPage = 1\n      _filter(filters, this.caseFilter, this.$route.path)\n      this.initTableData()\n    },\n    handleBatchEdit() {\n      this.$refs.batchEdit.open()\n    },\n    handleBatchMove() {\n      this.$refs.batchMove.open(this.treeNodes)\n\n      // this.$emit(\"batchMove\", this.caseIds)\n    },\n    setModuleOptions() {\n      this.condition.moduleOptions = getModuleOptions(this.treeNodes)\n    },\n    setMaintainerOptions() {\n      this.batchEditValueArr.maintainer = this.users\n      this.condition.maintainerOptions = this.users\n    },\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n\n.table-page {\n  padding-top: 20px;\n  margin-right: -9px;\n  float: right;\n}\n\n.operate-button {\n  float: right;\n}\n\n.operate-button > div {\n  display: inline-block;\n  margin-left: 10px;\n}\n\n.search {\n  margin-left: 10px;\n  width: 240px;\n}\n\n.el-table {\n  cursor: pointer;\n}\n\n</style>\n"]}]}