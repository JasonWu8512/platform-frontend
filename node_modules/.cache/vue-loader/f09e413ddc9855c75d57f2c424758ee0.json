{"remainingRequest":"/Users/jlglqa/Documents/QA/noa/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jlglqa/Documents/QA/noa/src/pages/track/case/TestCase.vue?vue&type=style&index=0&id=48f84a65&lang=scss&scoped=true&","dependencies":[{"path":"/Users/jlglqa/Documents/QA/noa/src/pages/track/case/TestCase.vue","mtime":1655949681780},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/css-loader/dist/cjs.js","mtime":1644298105513},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1644314988580},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/@vue/cli-service/node_modules/postcss-loader/src/index.js","mtime":1644298105780},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/sass-loader/dist/cjs.js","mtime":1644314983366},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/cache-loader/dist/cjs.js","mtime":1644298102062},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/vue-loader/lib/index.js","mtime":1644314988580}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKQGltcG9ydCAic3JjL2Fzc2V0cy9jc3MvdXRpbHMiOwoKLmVsLWFzaWRlIHsKICBwYWRkaW5nOiAxMHB4OwogIGJhY2tncm91bmQ6IHdoaXRlOwogIHdpZHRoOiAkYXNpZGUtdHJlZS13aWR0aCAhaW1wb3J0YW50Owp9CgoubWFpbi1jbGFzcyB7CiAgcGFkZGluZzogMDsKfQo="},{"version":3,"sources":["TestCase.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiLA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"TestCase.vue","sourceRoot":"src/pages/track/case","sourcesContent":["<template>\n  <el-container v-loading=\"loading\">\n    <el-aside v-if=\"!asideHidden\">\n      <select-menu\n        :current-data=\"currentProject\"\n        :data=\"projects\"\n        title=\"项目\"\n        @dataChange=\"changeProject\"\n      />\n      <node-tree\n        ref=\"nodeTree\"\n        :current-node.sync=\"selectNode\"\n        :current-project=\"currentProject\"\n        :disabled=\"currentProject.id === undefined\"\n        :draggable=\"nodeTreeDraggable\"\n        :tree-nodes=\"treeNodes\"\n        :type=\"operationEnum.EDIT\"\n        @nodeSelectEvent=\"nodeChange\"\n        @refreshNode=\"refreshNode\"\n        @refreshTable=\"refreshTable\"\n      />\n    </el-aside>\n    <el-main :class=\"asideHidden ? 'main-class' : ''\">\n      <test-case-list\n        ref=\"testCaseList\"\n        :condition.sync=\"condition\"\n        :current-project=\"currentProject\"\n        :read-only.sync=\"readOnly\"\n        :select-node=\"selectNode\"\n        :select-parent-nodes=\"selectParentNodes\"\n        :tree-nodes=\"treeNodes\"\n        @refresh=\"refreshTable\"\n      />\n    </el-main>\n    <test-case-edit\n      ref=\"testCaseEditDialog\"\n      :condition=\"condition\"\n      :current-project=\"currentProject\"\n      :read-only=\"readOnly\"\n      :select-node=\"selectNode\"\n      :tree-nodes=\"treeNodes\"\n      @refresh=\"refreshTable\"\n    />\n    <test-case-import\n      :current-project=\"currentProject\"\n      :select-node=\"selectNode\"\n      @refresh=\"refreshTable\"\n    />\n    <hidden-button @click=\"handleClick\"/>\n  </el-container>\n</template>\n\n<script lang=\"ts\">\nimport {testCaseApi} from \"@/api\"\nimport {typeNode, typeNodeData} from \"@/api/types/testTrackType\"\nimport variables from \"@/assets/css/utils.scss\"\nimport HiddenButton from \"@/common/components/side/HiddenButton.vue\"\nimport {PathName} from \"@/constant/routeData\"\nimport {operationEnum} from \"@/constant/TestCase\"\nimport TestCaseEdit from \"@/pages/track/case/components/TestCaseEdit.vue\"\nimport TestCaseImport from \"@/pages/track/case/components/TestCaseImport.vue\"\nimport TestCaseList from \"@/pages/track/case/components/TestCaseList.vue\"\nimport NodeTree from \"@/pages/track/common/NodeTree.vue\"\nimport SelectMenu from \"@/pages/track/common/SelectMenu.vue\"\n\n\nexport default {\n  name: \"TestCase\",\n  components: {\n    HiddenButton,\n    TestCaseImport,\n    NodeTree,\n    TestCaseList,\n    TestCaseEdit,\n    SelectMenu,\n  },\n  comments: {},\n  data() {\n    return {\n      operationEnum: operationEnum,\n      projects: this.projects,\n      currentProject: {},\n      treeNodes: [],\n      selectNode: {},\n      asideHidden: false,\n      selectParentNodes: [],\n      readOnly: true,\n      nodeTreeDraggable: false,\n      condition: {\n        // components: TEST_CASE_CONFIGS\n      },\n    }\n  },\n  inject: ['projects'],\n  computed: {\n    projectId() {\n      return this.$route.params.projectId\n    },\n    moduleId() {\n      return this.$route.params.moduleId\n    },\n    loading() {\n      return this.$store.state.loading\n    },\n    hiddenButtonPosition() {\n      return variables['hiddenButtonPosition']\n    },\n  },\n  watch: {\n    selectNode() {\n      // 值为空代表是节点被删除了或切换了项目\n      if (!this.selectNode.id) {\n        // 清除面包屑导航\n        this.selectParentNodes = []\n      }\n    }\n  },\n  mounted() {\n    let currentProject\n    if (this.projectId) {\n      currentProject = this.projects.find((item: { id: string }) => item.id === this.projectId)\n    } else {\n      currentProject = this.projects[0]\n    }\n    if (this.moduleId) {\n      this.selectNode.id = this.moduleId\n    }\n    this.changeProject(currentProject, this.moduleId)\n  },\n  methods: {\n    async changeProject(project: { id: string }, moduleId?: string) {\n      this.currentProject = project\n      await this.getNodeTree()\n      if (!moduleId) {\n        this.selectNode = {}\n        this.refreshTable()\n        await this.$router.push({\n          name: PathName.TestTrackTestcaseProject,\n          params: {projectId: project.id}\n        })\n      }\n    },\n    nodeChange(data: typeNodeData, pNodes: typeNode[]) {\n      this.selectParentNodes = pNodes\n      this.selectNode = data\n      this.refreshTable()\n      this.$router.push({\n        name: PathName.TestTrackTestcaseModule,\n        params: {projectId: this.currentProject.id, moduleId: data.id}\n      })\n    },\n    async getNodeTree() {\n      if (this.currentProject) {\n        await testCaseApi.getTestCaseModules({projId: this.currentProject.id})\n          .then((data) => {\n            this.treeNodes = data.data\n          })\n      }\n    },\n    refreshNode() {\n      this.getNodeTree()\n    },\n    refreshTable() {\n      this.$nextTick(() => {\n        // 重置页面\n        this.$refs.testCaseList.currentPage = 1\n        this.$refs.testCaseList.initTableData()\n      })\n    },\n    handleClick(isHidden: Boolean) {\n      this.asideHidden = isHidden\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"src/assets/css/utils\";\n\n.el-aside {\n  padding: 10px;\n  background: white;\n  width: $aside-tree-width !important;\n}\n\n.main-class {\n  padding: 0;\n}\n</style>\n"]}]}