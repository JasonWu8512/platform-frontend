{"remainingRequest":"/Users/jlglqa/Documents/QA/noa/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jlglqa/Documents/QA/noa/src/pages/track/plan/view/TestPlanView.vue?vue&type=style&index=0&id=30590b43&lang=scss&scoped=true&","dependencies":[{"path":"/Users/jlglqa/Documents/QA/noa/src/pages/track/plan/view/TestPlanView.vue","mtime":1655949681803},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/css-loader/dist/cjs.js","mtime":1644298105513},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1644314988580},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/@vue/cli-service/node_modules/postcss-loader/src/index.js","mtime":1644298105780},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/sass-loader/dist/cjs.js","mtime":1644314983366},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/cache-loader/dist/cjs.js","mtime":1644298102062},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/vue-loader/lib/index.js","mtime":1644314988580}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKQGltcG9ydCAic3JjL2Fzc2V0cy9jc3MvdXRpbHMiOwoKLmVsLWFzaWRlIHsKICBwYWRkaW5nOiAxMHB4OwogIGJhY2tncm91bmQ6IHdoaXRlOwogIHdpZHRoOiAkYXNpZGUtdHJlZS13aWR0aCAhaW1wb3J0YW50Owp9Cgouc2VsZWN0LW1lbnUgewogIGRpc3BsYXk6IGlubGluZS1ibG9jazsKfQoKLmhlYWRlci1tZW51LmVsLW1lbnUtLWhvcml6b250YWwgPiBsaSB7CiAgaGVpZ2h0OiA0OXB4OwogIGxpbmUtaGVpZ2h0OiA1MHB4OwogIGNvbG9yOiBkaW1ncmF5Owp9CgoubWFpbi1jbGFzcyB7CiAgcGFkZGluZzogMDsKfQoK"},{"version":3,"sources":["TestPlanView.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgJA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"TestPlanView.vue","sourceRoot":"src/pages/track/plan/view","sourcesContent":["<template>\n  <el-container v-loading=\"loading\">\n    <el-aside v-if=\"!asideHidden\">\n      <node-tree\n        ref=\"nodeTree\"\n        :current-node=\"selectNode\"\n        :disabled=\"selectNode.id === undefined\"\n        :draggable=\"nodeTreeDraggable\"\n        :treeNodes=\"treeNodes\"\n        :type=\"operationEnum.VIEW\"\n        @nodeSelectEvent=\"handleSelect\"\n        @refresh=\"reloadMenu\"\n      />\n    </el-aside>\n    <el-main :class=\"asideHidden ? 'main-class' : ''\">\n      <test-case-plan-list\n        ref=\"testCasePlanList\"\n        :select-node=\"selectNode\"\n        :select-parent-nodes=\"selectParentNodes\"\n        :tree-nodes=\"treeNodes\"\n        @refresh=\"refresh\"\n        @testCaseEdit=\"editTestCase\"\n      />\n    </el-main>\n    <hidden-button @click=\"handleClick\"/>\n    <!--    <test-case-edit-->\n    <!--      ref=\"testCaseEditDialog\"-->\n    <!--      :current-project=\"selectNode\"-->\n    <!--      :read-only=\"readOnly\"-->\n    <!--      :select-node=\"selectNode\"-->\n    <!--      :tree-nodes=\"treeNodes\"-->\n    <!--      @refresh=\"refreshTable\">-->\n    <!--    </test-case-edit>-->\n    <!--    <div>-->\n    <!--          <test-plan-functional v-if=\"activeIndex === 'functional'\" :plan-id=\"planId\"/>-->\n  </el-container>\n</template>\n\n<script lang=\"ts\">\n\nimport {testPlanApi} from \"@/api\"\nimport {typeNode} from \"@/api/types/testTrackType\"\nimport variables from \"@/assets/css/utils.scss\"\nimport HiddenButton from \"@/common/components/side/HiddenButton.vue\"\nimport {PathName} from \"@/constant/routeData\"\nimport {operationEnum} from \"@/constant/TestCase\"\nimport NodeTree from \"@/pages/track/common/NodeTree.vue\"\nimport TestCasePlanList from \"@/pages/track/plan/view/comonents/TestCasePlanList.vue\"\n\nexport default {\n  name: \"TestPlanView\",\n  components: {\n    HiddenButton,\n    TestCasePlanList,\n    NodeTree\n  },\n  data() {\n    return {\n      operationEnum: operationEnum,\n      testPlans: [],\n      treeNodes: [],\n      selectNode: {},\n      selectParentNodes: [],\n      activeIndex: \"functional\",\n      isMenuShow: true,\n      nodeTreeDraggable: false,\n      asideHidden: false,\n    }\n  },\n  computed: {\n    planId() {\n      return this.$route.params.planId\n    },\n    projId() {\n      return this.$route.query.projId\n    },\n    treeId() {\n      return this.$route.query.treeId\n    },\n    loading() {\n      return this.$store.state.loading\n    },\n    hiddenButtonPosition() {\n      return variables['hiddenButtonPosition']\n    },\n  },\n  watch: {\n    '$route'() {\n      if (this.planId && !(this.treeId || this.projId)) {\n        this.getTestPlanCaseTree()\n      }\n    },\n  },\n  mounted() {\n    if (this.planId) {\n      this.getTestPlanCaseTree()\n    }\n    if (this.projId || this.treeId) {\n      this.selectNode.id = this.projId | this.treeId\n    }\n  },\n  methods: {\n    getTestPlanCaseTree() {\n      // 清除面包屑导航\n      this.selectParentNodes = []\n      testPlanApi.getTestCasePlanCaseTree(this.planId)\n        .then(({data}) => {\n          this.treeNodes = data\n        })\n    },\n    handleSelect(data: typeNode, pNodes: any, node: typeNode) {\n      this.selectParentNodes = pNodes\n      this.selectNode = data\n      this.$refs.testCasePlanList.currentPage = 1\n      const _query = node.level === 1 ? {projId: data.id} : {treeId: data.id}\n      this.$router.push({\n        name: PathName.TestTrackCasePlanView,\n        query: _query\n      })\n    },\n    openTemplateReport() {\n      this.$refs.testReportTemplateList.open(this.planId)\n    },\n    editTestCase() {\n\n    },\n    refresh() {\n      this.$refs.testCasePlanList.initTableData()\n      this.getTestPlanCaseTree()\n    },\n    reloadMenu() {\n      this.isMenuShow = false\n      this.$nextTick(() => {\n        this.isMenuShow = true\n      })\n    },\n    handleClick(isHidden: Boolean) {\n      this.asideHidden = isHidden\n    }\n  },\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"src/assets/css/utils\";\n\n.el-aside {\n  padding: 10px;\n  background: white;\n  width: $aside-tree-width !important;\n}\n\n.select-menu {\n  display: inline-block;\n}\n\n.header-menu.el-menu--horizontal > li {\n  height: 49px;\n  line-height: 50px;\n  color: dimgray;\n}\n\n.main-class {\n  padding: 0;\n}\n\n</style>\n"]}]}