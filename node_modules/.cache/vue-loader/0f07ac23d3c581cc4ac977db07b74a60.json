{"remainingRequest":"/Users/jlglqa/Documents/QA/noa/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jlglqa/Documents/QA/noa/src/pages/track/review/view/components/TestReviewTestCaseList.vue?vue&type=style&index=0&id=33f436f4&lang=scss&scoped=true&","dependencies":[{"path":"/Users/jlglqa/Documents/QA/noa/src/pages/track/review/view/components/TestReviewTestCaseList.vue","mtime":1655949681808},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/css-loader/dist/cjs.js","mtime":1644298105513},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1644314988580},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/@vue/cli-service/node_modules/postcss-loader/src/index.js","mtime":1644298105780},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/sass-loader/dist/cjs.js","mtime":1644314983366},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/cache-loader/dist/cjs.js","mtime":1644298102062},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/vue-loader/lib/index.js","mtime":1644314988580}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouZWwtdGFibGUgewogIGN1cnNvcjogcG9pbnRlcjsKfQo="},{"version":3,"sources":["TestReviewTestCaseList.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiWA;AACA;AACA","file":"TestReviewTestCaseList.vue","sourceRoot":"src/pages/track/review/view/components","sourcesContent":["<template>\n  <div>\n    <el-card class=\"card-content\">\n      <template slot=\"header\">\n        <table-header\n          :condition=\"condition\"\n          :show-create=\"false\"\n          :show-run=\"true\"\n          run-tip=\"开始评审\"\n          @runTest=\"handleReviewRun\"\n          @search=\"handleSearch\"\n        >\n          <template slot=\"title\">\n            <div>全部用例</div>\n          </template>\n        </table-header>\n\n      </template>\n      <el-table\n        ref=\"table\"\n        v-loading=\"loading\"\n        :data=\"tableData\"\n        class=\"test-content adjust-table\"\n        row-key=\"id\"\n        @select=\"handleSelectionChange\"\n        @filter-change=\"filter\"\n        @select-all=\"handleSelectAll\"\n        @row-click=\"handleReviewRun\"\n      >\n\n        <!--  复选框  -->\n        <el-table-column type=\"selection\"/>\n\n        <!--  复选按钮 -->\n        <el-table-column :resizable=\"false\" align=\"center\" width=\"40\">\n          <template slot-scope=\"scope\">\n            <show-more-btn\n              :buttons=\"buttons\"\n              :is-disabled=\"scope.row.isDisabled\"\n              :size=\"selectRows.size\"\n            />\n          </template>\n        </el-table-column>\n\n        <!--  名称  -->\n        <el-table-column label=\"名称\" prop=\"name\" show-overflow-tooltip/>\n\n        <!--  用例等级  -->\n        <el-table-column\n          :filters=\"priorityOptions\"\n          column-key=\"importance\"\n          label=\"用例等级\"\n          prop=\"importance\"\n          show-overflow-tooltip\n        >\n          <template slot-scope=\"scope\">\n            <priority-table-item :value=\"scope.row.importance\"/>\n          </template>\n        </el-table-column>\n\n        <!--  类型  -->\n        <el-table-column\n          column-key=\"caseType\"\n          label=\"类型\"\n          prop=\"caseType\"\n          show-overflow-tooltip\n        >\n          <template slot-scope=\"scope\">\n            <case-type-table-item :value=\"scope.row.caseType\"/>\n          </template>\n        </el-table-column>\n\n        <!--  测试方式  -->\n        <el-table-column\n          column-key=\"executionType\"\n          label=\"测试方式\"\n          prop=\"executionType\"\n          show-overflow-tooltip\n        >\n          <template slot-scope=\"scope\">\n            <execution-type-table-item :value=\"scope.row.executionType\"/>\n          </template>\n        </el-table-column>\n\n        <!--  所属模块  -->\n        <el-table-column label=\"所属模块\" prop=\"treePath\" show-overflow-tooltip/>\n\n        <!--  所属项目  -->\n        <el-table-column label=\"所属项目\" prop=\"projName\" show-overflow-tooltip/>\n\n        <!--  评审结果  -->\n        <el-table-column :filters=\"statusOptions\" column-key=\"status\" label=\"评审结果\">\n          <template slot-scope=\"scope\">\n            <review-case-status-table-item :value=\"scope.row.status\"/>\n          </template>\n        </el-table-column>\n\n        <!--  更新时间  -->\n        <el-table-column\n          :width=\"tableTimeWidth\"\n          label=\"更新时间\"\n          prop=\"updatedAt\"\n          show-overflow-tooltip\n          sortable\n        />\n\n        <!--  操作  -->\n        <el-table-column :width=\"table1BtnWidth\" label=\"操作\">\n          <template slot-scope=\"scope\">\n            <table-operator run-tip=\"开始评审\" show-run @runClick=\"handleReviewRun(scope.row)\"/>\n          </template>\n        </el-table-column>\n      </el-table>\n\n      <table-pagination\n        :change=\"initTableData\"\n        :current-page.sync=\"currentPage\"\n        :page-size.sync=\"pageSize\"\n        :total=\"total\"\n      />\n\n    </el-card>\n\n    <batch-edit\n      ref=\"batchEdit\"\n      :type-arr=\"caseBatchReviewOptions\"\n      :value-arr=\"batchReviewValueArr\"\n      dialog-title=\"批量评审用例\"\n      @batchEdit=\"batchReview\"\n    />\n\n  </div>\n</template>\n\n<script lang=\"ts\">\n\nimport {testCaseApi} from \"@/api\"\nimport {RequestGetTestCaseList, RequestUpdateTestCaseBatch} from \"@/api/types/testTrack\"\nimport {typeCaseData} from \"@/api/types/testTrackType\"\nimport variables from \"@/assets/css/utils.scss\"\nimport TablePagination from \"@/common/components/pagination/TablePagination.vue\"\nimport TableHeader from \"@/common/components/TableHeader.vue\"\nimport TableOperator from \"@/common/components/TableOperator.vue\"\nimport {_filter, formatTime} from \"@/common/utils\"\nimport {PAGINATION_SIZE} from \"@/constant\"\nimport {caseTypeType, caseUpdateTypeEnum, executionType, priorityType} from \"@/constant/TestCase\"\nimport {caseBatchReviewType, reviewCaseStatusType} from \"@/constant/TestReivew\"\nimport BatchEdit from \"@/pages/track/case/components/BatchEdit.vue\"\nimport ShowMoreBtn from \"@/pages/track/case/components/ShowMoreBtn.vue\"\nimport CaseTypeTableItem from \"@/pages/track/common/tableItems/CaseTypeTableItem.vue\"\nimport ExecutionTypeTableItem from \"@/pages/track/common/tableItems/ExecutionTypeTableItem.vue\"\nimport PriorityTableItem from \"@/pages/track/common/tableItems/PriorityTableItem.vue\"\nimport ReviewCaseStatusTableItem from \"@/pages/track/common/tableItems/ReviewCaseStatusTableItem.vue\"\nimport {getModuleByTreeId, getModuleOptions} from \"@/pages/track/common/utils\"\n\n// 执行方式\nconst executionOptions = Object.entries(executionType).map(([value, text]) => {\n  return {text: text, value: value}\n})\n// 用例优先级\nconst priorityOptions = Object.entries(priorityType).map(([value, text]) => {\n  return {text: text, value: value}\n})\n// 评审状态\nconst statusOptions = Object.entries(reviewCaseStatusType).map(([value, text]) => {\n  return {text: text, value: value}\n})\n// 用例类型\nconst caseTypeOptions = Object.entries(caseTypeType).map(([value, text]) => {\n  return {text: text, value: value}\n})\n// 批量编辑类型\nconst caseBatchReviewOptions = Object.entries(caseBatchReviewType).map(([value, text]) => {\n  return {text: text, value: value}\n})\n\nexport default {\n  name: \"TestReviewTestCaseList\",\n  components: {\n    ExecutionTypeTableItem,\n    CaseTypeTableItem,\n    ReviewCaseStatusTableItem,\n    TableOperator,\n    PriorityTableItem,\n    TablePagination,\n    TableHeader,\n    BatchEdit,\n    ShowMoreBtn,\n  },\n  data() {\n    return {\n      executionOptions: executionOptions,\n      priorityOptions: priorityOptions,\n      statusOptions: statusOptions,\n      caseTypeOptions: caseTypeOptions,\n      caseBatchReviewOptions: caseBatchReviewOptions,\n      tableData: [],\n      treeNodes: [],\n      currentPage: 1,\n      pageSize: PAGINATION_SIZE.LARGE,\n      total: 0,\n      selectRows: new Set(),\n      isDisabled: true,\n      caseFilter: {},\n      buttons: [{name: '批量评审用例', handleClick: this.handleBatchReview}],\n      condition: {\n        // 所属模块\n        moduleOptions: [],\n        // 维护人\n        maintainerOptions: [],\n        // 执行方式\n        executionOptions: executionOptions,\n        // 优先级\n        priorityOptions: priorityOptions,\n        // 用例类型\n        caseTypeOptions: caseTypeOptions,\n      },\n      batchReviewValueArr: {\n        // 评审状态\n        status: statusOptions,\n      },\n    }\n  },\n  props: {\n    currentReview: Object,\n    projects: Array,\n  },\n  computed: {\n    loading() {\n      return this.$store.state.loading\n    },\n    users() {\n      return this.$store.state.users.users\n    },\n    table1BtnWidth() {\n      return variables['table1BtnWidth']\n    },\n    tableTimeWidth() {\n      return variables['tableTimeWidth']\n    },\n    caseIds() {\n      return Array.from(this.selectRows).map((row: { id: string }) => row.id)\n    },\n  },\n  watch: {\n    currentReview() {\n      this.initTableData()\n    }\n  },\n  methods: {\n    async setSelectOptions() {\n      await this.setModuleOptions()\n      // this.setMaintainerOptions()\n    },\n    async initTableData() {\n      await this.setSelectOptions()\n      await this.getData()\n    },\n    async getData(value?: string) {\n      const params: RequestGetTestCaseList = {\n        treeId: this.currentReview.treeId,\n        offset: this.pageSize * (this.currentPage - 1),\n        limit: this.pageSize,\n        name: value,\n      }\n\n      this.caseFilter = sessionStorage.getItem(this.$route.path)\n      this.caseFilter = this.caseFilter ? JSON.parse(this.caseFilter) : {}\n      if (JSON.stringify(this.caseFilter) !== \"{}\") {\n        Object.assign(params, this.caseFilter)\n        this.$refs.table.columns.forEach((item: any) => {\n          item.filteredValue = this.caseFilter[item.columnKey]\n        })\n      }\n\n      await testCaseApi.getTestCaseList(params)\n        .then(({data}) => {\n          this.total = data.total\n          this.tableData = data.data\n          this.tableData.forEach((item: any) => {\n            item.updatedAt = formatTime(item.updatedAt)\n            item.treePath = getModuleByTreeId(this.treeNodes, item.treeId).path\n            item.projName = this.projects.find((obj: any) => obj.id === item.projId).name\n          })\n        })\n    },\n    handleSearch(value?: string) {\n      this.getData(value)\n    },\n    handleReviewRun(testCase?: typeCaseData) {\n      // 开始评审按钮，默认选择第一个\n      if (!testCase) testCase = this.tableData[0]\n      this.$eventBus.$emit(\"testReviewCaseRun\", testCase, this.tableData, this)\n    },\n    handleSelectAll(selection: Object[]) {\n      if (selection.length > 0) {\n        this.tableData.forEach((item: any) => {\n          this.$set(item, \"isDisabled\", false)\n        })\n        this.selectRows = new Set(selection)\n      } else {\n        this.selectRows.clear()\n        this.tableData.forEach((row: any) => {\n          this.$set(row, \"isDisabled\", true)\n        })\n      }\n    },\n    handleSelectionChange(selection: Object[], row: any) {\n      if (selection.indexOf(row) === -1) {\n        this.$set(row, \"isDisabled\", true)\n      } else {\n        this.$set(row, \"isDisabled\", false)\n      }\n      this.selectRows = new Set(selection)\n    },\n    batchReview(reviewForm: any) {\n      const body: RequestUpdateTestCaseBatch = {\n        caseIds: this.caseIds,\n        type: caseUpdateTypeEnum.UPDATE_REVIEW_STATUS,\n        status: reviewForm.value,\n        reviewId: this.currentReview.id,\n      }\n      testCaseApi.updateTestCaseBatch(body)\n        .then(() => {\n          this.refresh()\n        })\n    },\n    handleBatchReview() {\n      this.$refs.batchEdit.open()\n    },\n    refresh() {\n      this.$emit('refresh')\n    },\n    filter(filters: any) {\n      this.currentPage = 1\n      _filter(filters, this.caseFilter, this.$route.path)\n      this.initTableData()\n    },\n    setMaintainerOptions() {\n      this.condition.maintainerOptions = this.users\n    },\n    async setModuleOptions() {\n      await testCaseApi.getTestCaseModules({projId: this.currentReview.projId})\n        .then(({data}) => {\n          this.treeNodes = data\n          this.condition.moduleOptions = getModuleOptions(this.treeNodes)\n        })\n    },\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.el-table {\n  cursor: pointer;\n}\n</style>\n"]}]}