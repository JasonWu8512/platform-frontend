{"remainingRequest":"/Users/jlglqa/Documents/QA/noa/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jlglqa/Documents/QA/noa/src/pages/coverage/FullCoverageTrend.vue?vue&type=style&index=0&id=2548b3c3&scoped=true&lang=scss&","dependencies":[{"path":"/Users/jlglqa/Documents/QA/noa/src/pages/coverage/FullCoverageTrend.vue","mtime":1667355004158},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/css-loader/dist/cjs.js","mtime":1644298105513},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1644314988580},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/@vue/cli-service/node_modules/postcss-loader/src/index.js","mtime":1644298105780},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/sass-loader/dist/cjs.js","mtime":1644314983366},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/cache-loader/dist/cjs.js","mtime":1644298102062},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/vue-loader/lib/index.js","mtime":1644314988580}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5lLWNoYXJ0IHsKICB3aWR0aDogMTAwJTsKICBoZWlnaHQ6IDUwMHB4OwogIG1hcmdpbjogMCBhdXRvCn0KCg=="},{"version":3,"sources":["FullCoverageTrend.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6GA;AACA;AACA;AACA;AACA","file":"FullCoverageTrend.vue","sourceRoot":"src/pages/coverage","sourcesContent":["<template>\n  <div>\n    <el-card>\n      <el-row>\n        <el-col :span=\"6\">\n          <el-select v-model=\"projId\" filterable style=\"width: 100%;padding-right: 5px\" @change=\"getFullCoverageTrend\">\n            <el-option v-for=\"item in pipelineOptions\"\n                       :key=\"item.projectId\"\n                       :value=\"item.projectId\"\n                       :label=\"item.name\"\n            ></el-option>\n          </el-select>\n        </el-col>\n        <el-col :span=\"6\">\n          <el-input v-model=\"commitId\" placeholder=\"选填commitId\" style=\"width: 100%;padding-right: 5px\"></el-input>\n        </el-col>\n        <el-col :span=\"3\">\n          <el-button type=\"primary\" round icon=\"el-icon-search\" @click=\"getFullCoverageTrend\"  style=\"float: left\">查询</el-button>\n        </el-col>\n      </el-row>\n    </el-card>\n    <el-card v-loading=\"loading\" style=\"margin-top: 15px\">\n      <chart  :autoresize=\"true\" :options=\"option\" class=\"e-chart\" v-if=\"inRefresh\"></chart>\n    </el-card>\n  </div>\n\n</template>\n\n<script>\nimport {coverageApi} from \"@/api\";\nexport default {\n  name: \"FullCoverageTrend\",\n  data() {\n    return {\n      inRefresh: false,\n      projId: '',\n      commitId: '',\n      pipelineOptions: [],\n      option: {\n        xAxis: {\n          type: 'category',\n          data:[],\n          axisLabel:{\n            interval: 0,\n            rotate: 25,\n          }},\n        tooltip: {\n          trigger: 'item',\n          formatter: function (params) {\n            return params.name;\n          }\n        },\n        yAxis: {\n          type: 'value',\n          axisLabel: {\n            formatter: '{value}%'\n          }\n        },\n        series: []\n      }\n      }\n    },\n  computed: {\n    loading() {\n      return this.$store.state.loading\n    },\n  },\n  created() {\n    this.getAllPipelines()\n  },\n  methods: {\n    getFullCoverageTrend() {\n      this.option.series = []\n      const params = {\n        projId: this.projId,\n        commitId: this.commitId\n      }\n      coverageApi.getFullCoverageReportTrend(params).then(res => {\n        this.option.xAxis.data = res.data.xAxis\n        this.option.series.push({type: 'line', data: res.data.series, label: {\n            show: true,\n            position: 'top',\n            formatter: '{c}%'\n          },})\n      }).finally(() => {\n        // 强制刷新图表，清除图表显示缓存\n        this.inRefresh = false;\n        this.$nextTick(() => {\n          this.inRefresh = true;\n        });\n      });\n    },\n    getAllPipelines() {\n      coverageApi.getPipelineList({offset: 0, limit: 1000}).then(res => {\n        this.projId = res.data.data[0]['projectId']\n        this.getFullCoverageTrend()\n        this.pipelineOptions = res.data.data.map(item => {\n          return {\n            projectId: item.projectId,\n            name: item.name,\n          }\n        })\n      })\n    }\n  }\n}\n</script>\n\n<style scoped lang=\"scss\">\n.e-chart {\n  width: 100%;\n  height: 500px;\n  margin: 0 auto\n}\n\n</style>\n"]}]}