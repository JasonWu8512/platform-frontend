{"remainingRequest":"/Users/jlglqa/Documents/QA/noa/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jlglqa/Documents/QA/noa/src/pages/coverage/FullCoverageTrend.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jlglqa/Documents/QA/noa/src/pages/coverage/FullCoverageTrend.vue","mtime":1655949681772},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/cache-loader/dist/cjs.js","mtime":1644298102062},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/babel-loader/lib/index.js","mtime":1644314985388},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/cache-loader/dist/cjs.js","mtime":1644298102062},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/vue-loader/lib/index.js","mtime":1644314988580}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7Y292ZXJhZ2VBcGl9IGZyb20gIkAvYXBpIjsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICJGdWxsQ292ZXJhZ2VUcmVuZCIsCiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIGluUmVmcmVzaDogZmFsc2UsCiAgICAgIHByb2pJZDogJycsCiAgICAgIGNvbW1pdElkOiAnJywKICAgICAgcGlwZWxpbmVPcHRpb25zOiBbXSwKICAgICAgb3B0aW9uOiB7CiAgICAgICAgeEF4aXM6IHsKICAgICAgICAgIHR5cGU6ICdjYXRlZ29yeScsCiAgICAgICAgICBkYXRhOltdLAogICAgICAgICAgYXhpc0xhYmVsOnsKICAgICAgICAgICAgaW50ZXJ2YWw6IDAsCiAgICAgICAgICAgIHJvdGF0ZTogMjUsCiAgICAgICAgICB9fSwKICAgICAgICB0b29sdGlwOiB7CiAgICAgICAgICB0cmlnZ2VyOiAnaXRlbScsCiAgICAgICAgICBmb3JtYXR0ZXI6IGZ1bmN0aW9uIChwYXJhbXMpIHsKICAgICAgICAgICAgcmV0dXJuIHBhcmFtcy5uYW1lOwogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgeUF4aXM6IHsKICAgICAgICAgIHR5cGU6ICd2YWx1ZScsCiAgICAgICAgICBheGlzTGFiZWw6IHsKICAgICAgICAgICAgZm9ybWF0dGVyOiAne3ZhbHVlfSUnCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBzZXJpZXM6IFtdCiAgICAgIH0KICAgICAgfQogICAgfSwKICBjb21wdXRlZDogewogICAgbG9hZGluZygpIHsKICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLmxvYWRpbmcKICAgIH0sCiAgfSwKICBjcmVhdGVkKCkgewogICAgdGhpcy5nZXRBbGxQaXBlbGluZXMoKQogIH0sCiAgbWV0aG9kczogewogICAgZ2V0RnVsbENvdmVyYWdlVHJlbmQoKSB7CiAgICAgIHRoaXMub3B0aW9uLnNlcmllcyA9IFtdCiAgICAgIGNvbnN0IHBhcmFtcyA9IHsKICAgICAgICBwcm9qSWQ6IHRoaXMucHJvaklkLAogICAgICAgIGNvbW1pdElkOiB0aGlzLmNvbW1pdElkCiAgICAgIH0KICAgICAgY292ZXJhZ2VBcGkuZ2V0RnVsbENvdmVyYWdlUmVwb3J0VHJlbmQocGFyYW1zKS50aGVuKHJlcyA9PiB7CiAgICAgICAgdGhpcy5vcHRpb24ueEF4aXMuZGF0YSA9IHJlcy5kYXRhLnhBeGlzCiAgICAgICAgdGhpcy5vcHRpb24uc2VyaWVzLnB1c2goe3R5cGU6ICdsaW5lJywgZGF0YTogcmVzLmRhdGEuc2VyaWVzLCBsYWJlbDogewogICAgICAgICAgICBzaG93OiB0cnVlLAogICAgICAgICAgICBwb3NpdGlvbjogJ3RvcCcsCiAgICAgICAgICAgIGZvcm1hdHRlcjogJ3tjfSUnCiAgICAgICAgICB9LH0pCiAgICAgIH0pLmZpbmFsbHkoKCkgPT4gewogICAgICAgIC8vIOW8uuWItuWIt+aWsOWbvuihqO+8jOa4hemZpOWbvuihqOaYvuekuue8k+WtmAogICAgICAgIHRoaXMuaW5SZWZyZXNoID0gZmFsc2U7CiAgICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4gewogICAgICAgICAgdGhpcy5pblJlZnJlc2ggPSB0cnVlOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0sCiAgICBnZXRBbGxQaXBlbGluZXMoKSB7CiAgICAgIGNvdmVyYWdlQXBpLmdldFBpcGVsaW5lTGlzdCh7b2Zmc2V0OiAwLCBsaW1pdDogMTAwMH0pLnRoZW4ocmVzID0+IHsKICAgICAgICB0aGlzLnByb2pJZCA9IHJlcy5kYXRhLmRhdGFbMF1bJ3Byb2plY3RJZCddCiAgICAgICAgdGhpcy5nZXRGdWxsQ292ZXJhZ2VUcmVuZCgpCiAgICAgICAgdGhpcy5waXBlbGluZU9wdGlvbnMgPSByZXMuZGF0YS5kYXRhLm1hcChpdGVtID0+IHsKICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIHByb2plY3RJZDogaXRlbS5wcm9qZWN0SWQsCiAgICAgICAgICAgIG5hbWU6IGl0ZW0ubmFtZSwKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICB9KQogICAgfQogIH0KfQo="},{"version":3,"sources":["FullCoverageTrend.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"FullCoverageTrend.vue","sourceRoot":"src/pages/coverage","sourcesContent":["<template>\n  <div>\n    <el-card>\n      <el-row>\n        <el-col :span=\"6\">\n          <el-select v-model=\"projId\" filterable style=\"width: 100%;padding-right: 5px\" @change=\"getFullCoverageTrend\">\n            <el-option v-for=\"item in pipelineOptions\"\n                       :key=\"item.projectId\"\n                       :value=\"item.projectId\"\n                       :label=\"item.name\"\n            ></el-option>\n          </el-select>\n        </el-col>\n        <el-col :span=\"6\">\n          <el-input v-model=\"commitId\" placeholder=\"选填commitId\" style=\"width: 100%;padding-right: 5px\"></el-input>\n        </el-col>\n        <el-col :span=\"3\">\n          <el-button type=\"primary\" round icon=\"el-icon-search\" @click=\"getFullCoverageTrend\"  style=\"float: left\">查询</el-button>\n        </el-col>\n      </el-row>\n    </el-card>\n    <el-card v-loading=\"loading\" style=\"margin-top: 15px\">\n      <chart  :autoresize=\"true\" :options=\"option\" class=\"e-chart\" v-if=\"inRefresh\"></chart>\n    </el-card>\n  </div>\n\n</template>\n\n<script>\nimport {coverageApi} from \"@/api\";\nexport default {\n  name: \"FullCoverageTrend\",\n  data() {\n    return {\n      inRefresh: false,\n      projId: '',\n      commitId: '',\n      pipelineOptions: [],\n      option: {\n        xAxis: {\n          type: 'category',\n          data:[],\n          axisLabel:{\n            interval: 0,\n            rotate: 25,\n          }},\n        tooltip: {\n          trigger: 'item',\n          formatter: function (params) {\n            return params.name;\n          }\n        },\n        yAxis: {\n          type: 'value',\n          axisLabel: {\n            formatter: '{value}%'\n          }\n        },\n        series: []\n      }\n      }\n    },\n  computed: {\n    loading() {\n      return this.$store.state.loading\n    },\n  },\n  created() {\n    this.getAllPipelines()\n  },\n  methods: {\n    getFullCoverageTrend() {\n      this.option.series = []\n      const params = {\n        projId: this.projId,\n        commitId: this.commitId\n      }\n      coverageApi.getFullCoverageReportTrend(params).then(res => {\n        this.option.xAxis.data = res.data.xAxis\n        this.option.series.push({type: 'line', data: res.data.series, label: {\n            show: true,\n            position: 'top',\n            formatter: '{c}%'\n          },})\n      }).finally(() => {\n        // 强制刷新图表，清除图表显示缓存\n        this.inRefresh = false;\n        this.$nextTick(() => {\n          this.inRefresh = true;\n        });\n      });\n    },\n    getAllPipelines() {\n      coverageApi.getPipelineList({offset: 0, limit: 1000}).then(res => {\n        this.projId = res.data.data[0]['projectId']\n        this.getFullCoverageTrend()\n        this.pipelineOptions = res.data.data.map(item => {\n          return {\n            projectId: item.projectId,\n            name: item.name,\n          }\n        })\n      })\n    }\n  }\n}\n</script>\n\n<style scoped lang=\"scss\">\n.e-chart {\n  width: 100%;\n  height: 500px;\n  margin: 0 auto\n}\n\n</style>\n"]}]}