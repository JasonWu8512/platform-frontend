{"remainingRequest":"/Users/jlglqa/Documents/QA/noa/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jlglqa/Documents/QA/noa/src/pages/track/plan/view/comonents/TestCaseRelevance.vue?vue&type=style&index=0&id=123c492a&lang=scss&scoped=true&","dependencies":[{"path":"/Users/jlglqa/Documents/QA/noa/src/pages/track/plan/view/comonents/TestCaseRelevance.vue","mtime":1655949681804},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/css-loader/dist/cjs.js","mtime":1644298105513},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1644314988580},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/@vue/cli-service/node_modules/postcss-loader/src/index.js","mtime":1644298105780},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/sass-loader/dist/cjs.js","mtime":1644314983366},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/cache-loader/dist/cjs.js","mtime":1644298102062},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/vue-loader/lib/index.js","mtime":1644314988580}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKQGltcG9ydCAic3JjL2Fzc2V0cy9jc3MvZGlzcGxheSI7CkBpbXBvcnQgInNyYy9hc3NldHMvY3NzL3V0aWxzIjsKCi5kaWFsb2ctdGl0bGUgewogIEBleHRlbmQgJWRpYWxvZy10aXRsZQp9CgoudGItZWRpdCAuZWwtaW5wdXQgewogIGRpc3BsYXk6IG5vbmU7CiAgY29sb3I6IGJsYWNrOwp9CgoudGItZWRpdCAuY3VycmVudC1yb3cgLmVsLWlucHV0IHsKICBkaXNwbGF5OiBibG9jazsKCn0KCi50Yi1lZGl0IC5jdXJyZW50LXJvdyAuZWwtaW5wdXQgKyBzcGFuIHsKICBkaXNwbGF5OiBub25lOwoKfQoKLm5vZGUtdHJlZSB7CiAgbWFyZ2luLXJpZ2h0OiAxMHB4Owp9CgouZWwtaGVhZGVyIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiBkYXJrZ3JleTsKICBjb2xvcjogIzMzMzsKICBsaW5lLWhlaWdodDogNjBweDsKfQoKLmNhc2UtY29udGVudCB7CiAgcGFkZGluZzogMCAyMHB4OwogIGhlaWdodDogMTAwJTsKICAvKmJvcmRlcjogMXB4IHNvbGlkICNFQkVFRjU7Ki8KfQoKLnRyZWUtYXNpZGUgewogIG1pbi1oZWlnaHQ6IDMwMHB4OwogIG1heC1oZWlnaHQ6IDEwMCU7Cn0KCi5tYWluLWNvbnRlbnQgewogIG1pbi1oZWlnaHQ6IDMwMHB4OwogIGhlaWdodDogMTAwJTsKICAvKmJvcmRlcjogMXB4IHNvbGlkICNFQkVFRjU7Ki8KfQoKLnByb2plY3QtbGluayB7CiAgZmxvYXQ6IHJpZ2h0OwogIG1hcmdpbi1yaWdodDogMTJweDsKICBtYXJnaW4tYm90dG9tOiAxMHB4Owp9Cgo="},{"version":3,"sources":["TestCaseRelevance.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyPA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"TestCaseRelevance.vue","sourceRoot":"src/pages/track/plan/view/comonents","sourcesContent":["<template>\n  <div>\n    <el-dialog\n      :close-on-click-modal=\"false\"\n      :visible.sync=\"dialogVisible\"\n      class=\"dialog-title\"\n      title=\"关联测试用例\"\n      width=\"60%\"\n      @close=\"close\"\n    >\n\n      <el-container v-loading=\"loading\" class=\"main-content\">\n        <el-aside class=\"tree-aside\" width=\"250px\">\n          <select-menu\n            :current-data=\"currentProject\"\n            :data=\"projects\"\n            title=\"切换项目\"\n            @dataChange=\"changeProject\"\n          />\n          <node-tree\n            ref=\"nodeTree\"\n            :current-node=\"selectNode\"\n            :tree-nodes=\"treeNodes\"\n            class=\"node-tree\"\n            @nodeSelectEvent=\"nodeChange\"\n          />\n        </el-aside>\n\n        <el-container>\n          <el-main class=\"case-content\">\n            <table-header :condition=\"condition\" :show-create=\"false\" @search=\"handleSearch\"/>\n            <el-table\n              ref=\"table\"\n              :data=\"tableData\"\n              class=\"test-content adjust-table\"\n              row-key=\"id\"\n              @selection-change=\"handleSelectionChange\"\n              @filter-change=\"filter\"\n              @select-all=\"handleSelectAll\"\n            >\n\n              <!--  复选框  -->\n              <el-table-column type=\"selection\"/>\n\n              <!--  用例名称  -->\n              <el-table-column label=\"用例名称\" prop=\"name\" show-overflow-tooltip/>\n\n              <!--  用例等级  -->\n              <el-table-column\n                :filters=\"priorityOptions\"\n                column-key=\"importance\"\n                label=\"用例等级\"\n                prop=\"importance\"\n                show-overflow-tooltip\n              >\n                <template slot-scope=\"scope\">\n                  <priority-table-item :value=\"scope.row.importance\"/>\n                </template>\n              </el-table-column>\n\n              <!--  类型  -->\n              <el-table-column\n                column-key=\"caseType\"\n                label=\"类型\"\n                prop=\"caseType\"\n                show-overflow-tooltip\n              >\n                <template slot-scope=\"scope\">\n                  <case-type-table-item :value=\"scope.row.caseType\"/>\n                </template>\n              </el-table-column>\n            </el-table>\n\n            <table-pagination\n              :change=\"initTableData\"\n              :current-page.sync=\"currentPage\"\n              :page-size.sync=\"pageSize\"\n              :total=\"total\"\n            />\n          </el-main>\n        </el-container>\n      </el-container>\n\n      <template slot=\"footer\">\n        <dialog-footer @cancel=\"dialogVisible = false\" @confirm=\"save\"/>\n      </template>\n\n    </el-dialog>\n\n  </div>\n\n</template>\n\n<script lang=\"ts\">\n\nimport {testCaseApi, testPlanApi} from \"@/api\"\nimport {RequestGetTestCasePlanUnRelateCaseList, RequestUpdateTestCasePlanCaseList} from \"@/api/types/testPlan\"\nimport {typeNode} from \"@/api/types/testTrackType\"\nimport DialogFooter from \"@/common/components/DialogFooter.vue\"\nimport TablePagination from \"@/common/components/pagination/TablePagination.vue\"\nimport TableHeader from \"@/common/components/TableHeader.vue\"\nimport {_filter} from \"@/common/utils\";\nimport {PAGINATION_SIZE} from \"@/constant\"\nimport {planOperationEnum} from \"@/constant/TestPlan\"\nimport NodeTree from \"@/pages/track/common/NodeTree.vue\"\nimport SelectMenu from \"@/pages/track/common/SelectMenu.vue\"\nimport CaseTypeTableItem from \"@/pages/track/common/tableItems/CaseTypeTableItem.vue\"\nimport PriorityTableItem from \"@/pages/track/common/tableItems/PriorityTableItem.vue\"\n\nexport default {\n  name: \"TestCaseRelevance\",\n  components: {\n    CaseTypeTableItem,\n    PriorityTableItem,\n    TablePagination,\n    NodeTree,\n    SelectMenu,\n    DialogFooter,\n    TableHeader\n  },\n  data() {\n    return {\n      priorityOptions: [],\n      caseTypeOptions: [],\n      dialogVisible: false,\n      currentProject: {},\n      treeNodes: [],\n      selectNode: {},\n      projects: [],\n      tableData: [],\n      selectRows: [],\n      currentPage: 1,\n      pageSize: PAGINATION_SIZE.LARGE,\n      total: 0,\n      caseFilter: {},\n      condition: {},\n    }\n  },\n  props: {\n    planId: [String, Number],\n  },\n  computed: {\n    loading() {\n      return this.$store.state.loading\n    }\n  },\n  methods: {\n    initOptions() {\n      this.projects = this.condition.projectOptions\n      this.priorityOptions = this.condition.priorityOptions\n      this.caseTypeOptions = this.condition.caseTypeOptions\n    },\n    initTableData() {\n      this.initOptions()\n      this.getData()\n    },\n    getData(value?: string) {\n      let params: RequestGetTestCasePlanUnRelateCaseList = {\n        offset: this.pageSize * (this.currentPage - 1),\n        limit: this.pageSize,\n        name: value,\n        treeId: this.selectNode.id,\n        projId: this.selectNode.id ? undefined : this.currentProject.id,\n      }\n\n      this.caseFilter = sessionStorage.getItem(this.$route.path)\n      this.caseFilter = this.caseFilter ? JSON.parse(this.caseFilter) : {}\n      if (JSON.stringify(this.caseFilter) !== \"{}\") {\n        Object.assign(params, this.caseFilter)\n        this.$refs.table.columns.forEach((item: any) => {\n          item.filteredValue = this.caseFilter[item.columnKey]\n        })\n      }\n\n      testPlanApi.getTestCasePlanUnRelateCaseList(this.planId, params)\n        .then(({data}) => {\n          this.total = data.total\n          this.tableData = data.data\n        })\n    },\n    open(condition: any, projId: string) {\n      this.condition = condition\n      this.initTableData()\n      this.currentProject.id = projId\n      this.dialogVisible = true\n    },\n    handleSearch(value?: string) {\n      this.currentPage = 1\n      this.getData(value)\n    },\n    handleSelectAll(selection: Object[]) {\n      if (selection.length > 0) {\n        this.selectRows = selection\n      } else {\n        this.selectRows = []\n      }\n    },\n    handleSelectionChange(selection: Object[]) {\n      this.selectRows = selection\n    },\n    filter(filters: any) {\n      this.currentPage = 1\n      _filter(filters, this.caseFilter, this.$route.path)\n      this.initTableData()\n    },\n    refreshNode() {\n      this.$emit('refresh')\n    },\n    save() {\n      let body: RequestUpdateTestCasePlanCaseList = {\n        operation: planOperationEnum.ADD,\n        caseIds: this.selectRows.map((obj: { id: string }) => {\n          return obj.id\n        }),\n        treeId: this.selectNode.id,\n        projId: this.selectNode.id ? undefined : this.currentProject.id\n      }\n      testPlanApi.updateTestCasePlanCaseList(this.planId, body)\n        .then(() => {\n          this.close()\n          this.$emit('refreshTable')\n        })\n    },\n    close() {\n      this.dialogVisible = false\n    },\n    changeProject(project: any) {\n      this.currentProject = project\n      testCaseApi.getTestCaseModules({projId: project.id})\n        .then((data) => {\n          this.treeNodes = data.data\n        })\n      this.selectNode = {}\n      this.initTableData()\n      // this.$emit('setProject', project.id)\n      // 获取项目时刷新该项目模块\n      // this.$emit('refreshNode')\n    },\n    nodeChange(node: typeNode) {\n      // 重置分页\n      this.currentPage = 1\n      this.selectNode = node\n      this.initTableData()\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"src/assets/css/display\";\n@import \"src/assets/css/utils\";\n\n.dialog-title {\n  @extend %dialog-title\n}\n\n.tb-edit .el-input {\n  display: none;\n  color: black;\n}\n\n.tb-edit .current-row .el-input {\n  display: block;\n\n}\n\n.tb-edit .current-row .el-input + span {\n  display: none;\n\n}\n\n.node-tree {\n  margin-right: 10px;\n}\n\n.el-header {\n  background-color: darkgrey;\n  color: #333;\n  line-height: 60px;\n}\n\n.case-content {\n  padding: 0 20px;\n  height: 100%;\n  /*border: 1px solid #EBEEF5;*/\n}\n\n.tree-aside {\n  min-height: 300px;\n  max-height: 100%;\n}\n\n.main-content {\n  min-height: 300px;\n  height: 100%;\n  /*border: 1px solid #EBEEF5;*/\n}\n\n.project-link {\n  float: right;\n  margin-right: 12px;\n  margin-bottom: 10px;\n}\n\n</style>\n"]}]}