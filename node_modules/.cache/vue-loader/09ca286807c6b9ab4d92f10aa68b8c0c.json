{"remainingRequest":"/Users/jlglqa/Documents/QA/noa/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jlglqa/Documents/QA/noa/src/pages/testTools/prMergeConfig.vue?vue&type=style&index=0&id=35cdc17e&lang=scss&scoped=true&","dependencies":[{"path":"/Users/jlglqa/Documents/QA/noa/src/pages/testTools/prMergeConfig.vue","mtime":1655949681779},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/css-loader/dist/cjs.js","mtime":1644298105513},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1644314988580},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/@vue/cli-service/node_modules/postcss-loader/src/index.js","mtime":1644298105780},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/sass-loader/dist/cjs.js","mtime":1644314983366},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/cache-loader/dist/cjs.js","mtime":1644298102062},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/vue-loader/lib/index.js","mtime":1644314988580}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgpAaW1wb3J0ICJzcmMvYXNzZXRzL2Nzcy91dGlscyI7CgouY2FyZC1jb250ZW50IHsKICBvdmVyZmxvdy15OiBhdXRvOwp9CgouZGlhbG9nLXRpdGxlIHsKICBAZXh0ZW5kICVkaWFsb2ctdGl0bGU7Cn0K"},{"version":3,"sources":["prMergeConfig.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgRA;;AAEA;AACA;AACA;;AAEA;AACA;AACA","file":"prMergeConfig.vue","sourceRoot":"src/pages/testTools","sourcesContent":["<template>\n  <div>\n    <el-card class=\"card-content\">\n      <template slot=\"header\">\n        <table-header\n          :condition=\"condition\"\n          create-tip=\"创建jira联动PR配置\"\n          placeholder=\"根据项目名称搜索\"\n          @create=\"handleAddOrEdit\"\n          @search=\"handleSearch\"\n        >\n          <template slot=\"title\">\n            <div>jira联动PR配置</div>\n          </template>\n        </table-header>\n      </template>\n      <el-table ref=\"table\" v-loading=\"loading\" :data=\"tableData\" @filter-change=\"filter\">\n\n        <!--  项目名称  -->\n        <el-table-column label=\"项目名称\" prop=\"project\" show-overflow-tooltip/>\n\n        <!--  激活状态  -->\n        <el-table-column label=\"激活状态\" prop=\"status\"/>\n\n        <!--  操作  -->\n        <el-table-column :width=\"table2BtnWidth\" label=\"操作\">\n          <template slot-scope=\"scope\">\n            <table-operator\n              show-delete\n              show-edit\n              @deleteClick=\"handleDelete(scope.row)\"\n              @editClick=\"handleAddOrEdit(scope.row)\"\n            />\n          </template>\n        </el-table-column>\n      </el-table>\n\n      <table-pagination\n        :change=\"initTableData\"\n        :current-page.sync=\"currentPage\"\n        :page-size.sync=\"pageSize\"\n        :total=\"total\"\n      />\n    </el-card>\n\n    <el-dialog\n      :close-on-click-modal=\"false\"\n      :title=\"operation === operationEnum.EDIT? '编辑jira联动PR配置' : '创建jira联动PR配置'\"\n      :visible.sync=\"dialogFormVisible\"\n      class=\"dialog-title\"\n      width=\"65%\"\n    >\n\n      <el-form ref=\"prMergedPRForm\" :model=\"form\" :rules=\"rules\">\n\n        <el-row>\n          <el-col :offset=\"1\" :span=\"10\">\n            <el-form-item :label-width=\"formLabelWidth\" label=\"项目\" prop=\"project\">\n              <el-select v-model=\"form.project\" filterable placeholder=\"请选择项目\">\n                <el-option\n                  v-for=\"item in projectPathOptions\"\n                  :key=\"item.path\"\n                  :label=\"item.project\"\n                  :value=\"item.path\"\n                />\n              </el-select>\n            </el-form-item>\n          </el-col>\n\n          <el-col :span=\"10\">\n            <el-form-item :label-width=\"formLabelWidth\" label=\"开通\" prop=\"isJiraActive\">\n              <el-switch\n                v-model=\"form.isJiraActive\"\n                active-color=\"#13ce66\"\n                inactive-color=\"#ff4949\"\n                active-value=\"1\"\n                inactive-value=\"0\">\n              </el-switch>\n            </el-form-item>\n          </el-col>\n        </el-row>\n\n      </el-form>\n\n      <template slot=\"footer\">\n        <dialog-footer @cancel=\"dialogFormVisible = false\" @confirm=\"saveConfig\"/>\n      </template>\n    </el-dialog>\n  </div>\n\n</template>\n\n<script lang=\"ts\">\nimport {gitlabChatApi} from \"@/api\"\nimport {\n  RequestCreateGitlabChatConfig,\n  RequestGetGitlabChatConfigList,\n  RequestUpdateGitlabChatConfig\n} from \"@/api/types/gitlab\"\nimport {typeGitlabChatData} from \"@/api/types/gitlabType\"\nimport variables from \"@/assets/css/utils.scss\"\nimport DialogFooter from '@/common/components/DialogFooter.vue'\nimport TablePagination from \"@/common/components/pagination/TablePagination.vue\"\nimport TableHeader from \"@/common/components/TableHeader.vue\"\nimport TableOperator from \"@/common/components/TableOperator.vue\"\nimport {_filter} from \"@/common/utils\"\nimport {PAGINATION_SIZE} from \"@/constant\"\nimport {operationEnum} from \"@/constant/Gitlab\"\nimport {planStageEnum} from \"@/constant/TestPlan\"\nimport {prMergedNotifyRules, prMergedPRForm} from \"@/pages/testTools/form\"\nimport {cloneDeep} from \"lodash\"\n\nexport default {\n  name: \"prMergeConfig\",\n  components: {\n    TableOperator,\n    TableHeader,\n    TablePagination,\n    DialogFooter,\n  },\n  data() {\n    return {\n      condition: {},\n      operationEnum: operationEnum,\n      planStageEnum: planStageEnum,\n      tableData: [],\n      currentPage: 1,\n      pageSize: PAGINATION_SIZE.LARGE,\n      total: 0,\n      form: prMergedPRForm,\n      rules: prMergedNotifyRules,\n      dialogFormVisible: false,\n      operation: '',\n      projectPathOptions: [],\n      isJiraActive: 1,\n      status: ''\n    }\n  },\n  computed: {\n    formLabelWidth() {\n      return '80px'\n    },\n    loading() {\n      return this.$store.state.loading\n    },\n    table2BtnWidth() {\n      return variables['table2BtnWidth']\n    }\n  },\n  mounted() {\n    this.initTableData()\n  },\n  methods: {\n    initTableData() {\n      this.setProjectPathOptions()\n      this.getData()\n    },\n    setProjectPathOptions() {\n      gitlabChatApi.getAllGitlabProjects()\n        .then(({data}) => {\n          this.projectPathOptions = data.data\n        })\n    },\n    buildParams() {\n      let body: RequestCreateGitlabChatConfig | RequestUpdateGitlabChatConfig = {\n        project: this.form.project,\n        isJiraActive: this.form.isJiraActive,\n      }\n      return body\n    },\n    getData(value?: string) {\n      const params: RequestGetGitlabChatConfigList = {\n        offset: this.pageSize * (this.currentPage - 1),\n        limit: this.pageSize,\n        project: value\n      }\n\n      this.configFilter = sessionStorage.getItem(this.$route.path)\n      this.configFilter = this.configFilter ? JSON.parse(this.configFilter) : {}\n      if (JSON.stringify(this.configFilter) !== \"{}\") {\n        Object.assign(params, this.configFilter)\n        this.$refs.table.columns.forEach((item: any) => {\n          item.filteredValue = this.configFilter[item.columnKey]\n        })\n      }\n\n      gitlabChatApi.getGitlabPRConfigList(params)\n        .then(({data}) => {\n          this.total = data.total\n          this.tableData = data.data\n          this.tableData.forEach((item: typeGitlabChatData) => {\n            if(item.isJiraActive === 1) {\n              item.status = \"已激活\"\n            }else {\n              item.status = \"未激活\"\n            }\n          })\n        })\n    },\n    saveConfig() {\n      this.$refs.prMergedPRForm.validate((valid: boolean) => {\n        if (valid) {\n          if (this.operation === operationEnum.ADD) {\n            const body: RequestCreateGitlabChatConfig = this.buildParams()\n            gitlabChatApi.createGitlabPRConfig(body)\n              .then(() => {\n                this.refresh()\n              })\n          } else if (this.operation === operationEnum.EDIT) {\n            const body: RequestUpdateGitlabChatConfig = this.buildParams()\n            gitlabChatApi.updateGitlabPRConfig(this.form.id, body)\n              .then(() => {\n                this.refresh()\n              })\n          }\n          this.dialogFormVisible = false\n        } else {\n          return false\n        }\n      })\n    },\n    handleAddOrEdit(gitlabChatConfig?: typeGitlabChatData) {\n      console.log(gitlabChatConfig)\n      this.dialogFormVisible = true\n      this.$nextTick(() => {\n        if (this.$refs.prMergedPRForm) {\n          this.$refs.prMergedPRForm.resetFields()\n        }\n        this.operation = operationEnum.ADD\n        //修改\n        if (gitlabChatConfig) {\n          this.operation = operationEnum.EDIT\n          this.form = cloneDeep(gitlabChatConfig)\n          this.form.isJiraActive = String(this.form.isJiraActive)\n        } else {\n          this.form = prMergedPRForm\n        }\n        this.setProjectPathOptions()\n      })\n    },\n    handleDelete(gitlabChatConfig: typeGitlabChatData) {\n      this.$alert('确认删除该配置?', '', {\n        confirmButtonText: '确定',\n        showCancelButton: true,\n        cancelButtonText: '取消',\n        callback: (action: string) => {\n          if (action === 'confirm') {\n            gitlabChatApi.deleteGitlabPRConfig(gitlabChatConfig.id)\n              .then(() => {\n                this.refresh()\n              })\n          }\n        }\n      })\n    },\n    handleSearch(value?: string) {\n      this.currentPage = 1\n      this.getData(value)\n    },\n    refresh() {\n      this.initTableData()\n    },\n    filter(filters: any) {\n      this.currentPage = 1\n      _filter(filters, this.configFilter, this.$route.path)\n      this.initTableData()\n    },\n  },\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@import \"src/assets/css/utils\";\n\n.card-content {\n  overflow-y: auto;\n}\n\n.dialog-title {\n  @extend %dialog-title;\n}\n</style>\n"]}]}