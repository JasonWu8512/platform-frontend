{"remainingRequest":"/Users/jlglqa/Documents/QA/noa/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jlglqa/Documents/QA/noa/src/pages/auto/components/AutoPointConfigEdit.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jlglqa/Documents/QA/noa/src/pages/auto/components/AutoPointConfigEdit.vue","mtime":1658296722433},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/cache-loader/dist/cjs.js","mtime":1644298102062},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/babel-loader/lib/index.js","mtime":1644314985388},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/cache-loader/dist/cjs.js","mtime":1644298102062},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/vue-loader/lib/index.js","mtime":1644314988580}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["AutoPointConfigEdit.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6GA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"AutoPointConfigEdit.vue","sourceRoot":"src/pages/auto/components","sourcesContent":["<template>\n  <el-dialog\n    :close-on-click-modal=\"false\"\n    :title=\"operation === operationEnum.EDIT? '编辑自动化配置' : '创建自动化配置'\"\n    :visible.sync=\"dialogFormVisible\"\n    class=\"dialog-title\"\n    width=\"65%\"\n  >\n    <el-form ref=\"autoConfigForm\" :model=\"form\" :rules=\"rules\">\n      <el-row>\n        <el-col :offset=\"1\" :span=\"8\">\n          <el-form-item :label-width=\"formLabelWidth\" label=\"名称\" prop=\"name\">\n            <el-input v-model=\"form.name\" placeholder=\"请输入自动化配置名称\"/>\n          </el-form-item>\n        </el-col>\n      </el-row>\n      <el-row>\n        <el-col :offset=\"1\" :span=\"10\">\n          <el-form-item :label-width=\"formLabelWidth\" label=\"业务线\" prop=\"pipelineIds\">\n            <el-select v-model=\"form.pipelineIds\" multiple filterable style=\"width: 75%\">\n              <el-option v-for=\"item in pipelineOptions\"\n                         :key=\"item.id\"\n                         :value=\"item.id\"\n                         :label=\"item.name\"\n              ></el-option>\n            </el-select>\n          </el-form-item>\n        </el-col>\n        <el-col :span=\"10\">\n          <el-form-item :label-width=\"formLabelWidth\" label=\"执行方式\" prop=\"runMethod\">\n            <el-select v-model=\"form.runMethod\" placeholder=\"请选择执行方式\" multiple filterable style=\"width: 75%\">\n              <el-option label=\"事件验证\" value=\"allEvents\"></el-option>\n              <el-option label=\"事件和属性值验证\" value=\"allEvents&properties\"></el-option>\n            </el-select>\n          </el-form-item>\n        </el-col>\n      </el-row>\n      <el-row>\n        <el-col :offset=\"1\" :span=\"10\">\n          <el-form-item :label-width=\"formLabelWidth\" label=\"定时器:\" prop=\"crontabSchedule\">\n            <el-input v-model=\"form.crontabSchedule\" placeholder=\"请输入crontab表达式：分 小时 日 月 星期\"></el-input>\n          </el-form-item>\n        </el-col>\n        <el-col :span=\"10\">\n          <el-form-item :label-width=\"formLabelWidth\" label=\"开启定时:\" prop=\"enableAutoTrigger\">\n            <el-radio v-model=\"form.enableAutoTrigger\" :label=\"true\">是</el-radio>\n            <el-radio v-model=\"form.enableAutoTrigger\" :label=\"false\">否</el-radio>\n          </el-form-item>\n        </el-col>\n      </el-row>\n      <el-row>\n        <el-col :offset=\"1\" :span=\"20\">\n          <el-form-item :label-width=\"formLabelWidth\" label=\"用例标签:\" prop=\"tags\">\n            <el-input v-model=\"form.tags\" placeholder=\"请输入执行用例的标签,方式有：mark1; not mark1; mark1 or mark2; mark1 and mark2等多种组合方式\"></el-input>\n          </el-form-item>\n        </el-col>\n      </el-row>\n      <el-row>\n        <el-col :offset=\"1\" :span=\"20\">\n          <el-form-item :label-width=\"formLabelWidth\" label=\"指定用例:\" prop=\"cases\">\n            <el-select v-model=\"caseNames\"\n                       multiple\n                       filterable\n                       :filter-method=\"selectFilterNodeMethod\"\n                       @change=\"selectChange\"\n                       style=\"width: 100%\"\n            >\n              <el-option :value=\"caseNodes\" style=\"height: auto\">\n                <el-tree :data=\"caseTree\"\n                         show-checkbox\n                         :props=\"{children: 'children', label: 'name'}\"\n                         @check-change=\"handleCheckChange\"\n                         :filter-node-method=\"filterNode\"\n                         :default-checked-keys=\"form.cases\"\n                         node-key=\"id\"\n                         ref=\"caseTree\"\n                ></el-tree>\n              </el-option>\n            </el-select>\n          </el-form-item>\n        </el-col>\n      </el-row>\n      <el-row>\n        <el-col :offset=\"1\" :span=\"20\">\n          <el-form-item :label-width=\"formLabelWidth\" label=\"通知群:\" prop=\"notifyChatIds\">\n            <el-select v-model=\"form.notifyChatIds\"\n                       filterable\n                       multiple\n                       placeholder=\"请选择需要通知的群\"\n                       style=\"width: 100%;\"\n            >\n              <el-option\n                v-for=\"item in chatOptions\"\n                :key=\"item.chatId\"\n                :label=\"item.name\"\n                :value=\"item.chatId\"\n              />\n            </el-select>\n          </el-form-item>\n        </el-col>\n      </el-row>\n    </el-form>\n    <template slot=\"footer\">\n      <dialog-footer @cancel=\"dialogFormVisible = false\" @confirm=\"savePipeline\"/>\n    </template>\n  </el-dialog>\n</template>\n\n<script>\nimport {autoApi, coverageApi} from \"@/api\"\nimport variables from \"@/assets/css/utils.scss\"\nimport DialogFooter from '@/common/components/DialogFooter.vue'\nimport {operationEnum} from \"@/constant/TestCase\"\nimport tagsSelect from '@/pages/auto/components/tagsSelect.vue'\n\nexport default {\n  name: \"AutoPointConfigEdit\",\n  // eslint-disable-next-line vue/no-unused-components\n  components: {DialogFooter,tagsSelect},\n  computed: {\n    owner() {\n      return this.$store.getters.userName;\n    },\n    formLabelWidth() {\n      return variables['formLabelWidth']\n    },\n    chatOptions() {\n      return this.$store.state.coverage.larkChats\n    }\n  },\n  data() {\n    const validateTags = (rule, value, callback) => {\n      if (value === '' && this.form.cases.length === 0) {\n        callback(new Error('标签和用例必须填一项'));\n      } else if (value !== '' && this.form.cases.length > 0) {\n        callback(new Error('标签和用例只能填一项'));\n      } else {\n        callback();\n      }\n    };\n    const validateCases = (rule, value, callback) => {\n      console.log('value', value)\n      if (value.length === 0 && this.form.tags === '') {\n        callback(new Error('标签和用例必须填一项'));\n      }else if (value.length > 0 && this.form.tags !== '') {\n        callback(new Error('标签和用例只能填一项'));\n      } else {\n        callback();\n      }\n    };\n    return {\n      dialogFormVisible: false,\n      operationEnum: operationEnum,\n      tagOptions: [],\n      caseTree: [],\n      pipelineOptions: [],\n      operation: '',\n      caseNames: '',\n      caseNodes: '',\n      form: {\n        name: '',\n        tags: '',\n        cases: [],\n        crontabSchedule: '',\n        enableAutoTrigger: false,\n        notifyChatIds: [],\n        pipelineIds: [],\n        runMethod: '',\n      },\n      rules: {\n        name: [{required: true, message: '请输入自动化配置名称', trigger: 'blur'}],\n        tags: [{required: false, validator: validateTags, trigger: \"blur\"}],\n        cases: [{required: false, validator: validateCases, trigger: \"blur\"}],\n        runMethod: [{ required: true, message: '请选择执行方式', trigger: 'change' }],\n      }\n    }\n  },\n  mounted() {\n    this.getTags()\n    this.getCaseTree()\n    this.getPipelines()\n  },\n  methods: {\n    // 获取自动化标签\n    getTags() {\n      autoApi.getAutoTags().then(res => {\n        this.tagOptions = res.data\n      })\n    },\n    // 获取所有自动化用例树\n    getCaseTree() {\n      autoApi.getAutoCases().then(res => {\n        this.caseTree = res.data\n      })\n    },\n    // 获取所有流水线\n    getPipelines() {\n      coverageApi.getPipelineList({offset: 0, limit: 1000}).then(res => {  \n        this.pipelineOptions = res.data.data.map(item => { \n          return {\n            id: item.id, \n            name: item.name, \n          }\n        })\n      })\n    },\n    // 打开创建/编辑配置表单\n    open(autoConfig) {\n      this.dialogFormVisible = true\n      this.$nextTick(() => {\n        if (this.$refs.autoConfigForm) { \n          this.$refs['autoConfigForm'].resetFields() \n          this.form.cases = [] \n          this.caseNames =  [] \n          this.caseNodes = []\n          this.$refs.caseTree.setCheckedNodes(this.caseNodes)\n        }\n        this.operation = operationEnum.ADD\n        //修改\n        if (autoConfig) {\n          this.operation = operationEnum.EDIT\n          this.form.id = autoConfig.id\n          this.form.name = autoConfig.name  \n          this.form.tags = autoConfig.tags  \n          this.form.cases = autoConfig.cases\n          this.form.crontabSchedule = autoConfig.crontabSchedule\n          this.form.enableAutoTrigger = autoConfig.enableAutoTrigger  \n          this.form.notifyChatIds = autoConfig.notifyChatIds  \n          this.form.pipelineIds = autoConfig.pipelineIds  \n          this.form.runMethod = autoConfig.runMethod  \n        }\n      })\n    },\n    // 保存自动化配置\n    savePipeline() {\n      this.$refs['autoConfigForm'].validate((valid) => {\n        if (valid) {\n          const params = {\n            name: this.form.name,  \n            tags: this.form.tags,\n            cases: this.form.cases,  \n            crontabSchedule: this.form.crontabSchedule,\n            enableAutoTrigger: this.form.enableAutoTrigger,\n            pipelineIds: this.form.pipelineIds,\n            runMethod: this.form.runMethod,\n            notifyChatIds: this.form.notifyChatIds\n          }\n          if (this.operation === operationEnum.ADD) {\n            // @ts-ignore\n            params.owner = this.owner\n          } else if (this.operation === operationEnum.EDIT) {\n            params.id = this.form.id\n          }\n          autoApi.createOrEditAutoConfig(params).then(\n            () => {\n              this.$emit('fatherMethod')\n            }\n          ).catch(() => {})\n          this.dialogFormVisible = false\n        } else {\n          return false\n        }\n      })\n    },\n    selectChange(event) {\n      // 这个event数组只有label\n      // 这里主要处理框内选中项的取消选中\n      let arrNew = [];\n      let caseIdNew = [];\n      this.caseNodes.forEach(item => {\n        event.forEach(eventItem => {\n          if (eventItem == item.name) {\n            arrNew.push(item)\n            caseIdNew.push(item.id)\n          }\n        })\n      })\n      this.form.cases = caseIdNew\n      this.$refs.caseTree.setCheckedNodes(arrNew)\n    },\n    // eslint-disable-next-line no-unused-vars\n    handleCheckChange (data, checked, indeterminate) {\n      let res = this.$refs.caseTree.getCheckedNodes(true, true);\n      let arrPath = [];\n      let arr = [];\n      let caseNodes = [];\n      res.forEach(item => {\n        arrPath.push(item.id);\n        arr.push(item.name)\n        caseNodes.push(item)\n      })\n      this.form.cases = arrPath\n      this.caseNames = arr;\n      this.caseNodes = caseNodes;\n    },\n    // 搜索树\n    filterNode(value, data) {\n      if (!value) return true;  \n      return data.name.indexOf(value) !== -1; \n    },\n    // select-tree filter_method\n    selectFilterNodeMethod(val) {\n      this.$refs.caseTree.filter(val)\n    }\n  }\n}\n</script>\n\n<style scoped>\n\n</style>\n"]}]}