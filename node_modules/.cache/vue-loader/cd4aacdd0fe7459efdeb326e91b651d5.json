{"remainingRequest":"/Users/jlglqa/Documents/QA/noa/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jlglqa/Documents/QA/noa/src/pages/track/plan/view/comonents/TestCasePlanList.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Users/jlglqa/Documents/QA/noa/src/pages/track/plan/view/comonents/TestCasePlanList.vue","mtime":1655949681803},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/babel-loader/lib/index.js","mtime":1644314985388},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/ts-loader/index.js","mtime":1644314987889},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/cache-loader/dist/cjs.js","mtime":1644298102062},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/vue-loader/lib/index.js","mtime":1644314988580}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["TestCasePlanList.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwfile":"TestCasePlanList.vue","sourceRoot":"src/pages/track/plan/view/comonents","sourcesContent":["<template>\n  <div>\n    <el-card class=\"card-content\">\n      <template slot=\"header\">\n        <table-header\n          :condition=\"condition\"\n          :create-tip=\"allCase ? '我的用例' : '全部用例'\"\n          :icon-create=\"allCase ? 'el-icon-s-custom' : 'el-icon-files'\"\n          icon-run=\"el-icon-connection\"\n          icon-third=\"el-icon-document-remove\"\n          run-tip=\"关联测试用例\"\n          show-run\n          show-third\n          third-tip=\"取消全部关联\"\n          @create=\"handleSwitch\"\n          @runTest=\"handleRelateCase\"\n          @search=\"handleSearch\"\n          @thirdClick=\"handleDelete\"\n        >\n          <template slot=\"title\">\n            <node-breadcrumb :nodes=\"selectParentNodes\" @refresh=\"refreshTable\"/>\n          </template>\n          <template slot=\"button\">\n            <el-button\n              v-if=\"planStage === planStageEnum.SMOKE\"\n              :icon=\"isQa ? 'el-icon-s-check' : 'el-icon-cpu'\"\n              @click=\"isQa = !isQa\"\n            >\n              {{ isQa ? '测试验证' : '开发执行' }}\n            </el-button>\n          </template>\n        </table-header>\n\n      </template>\n      <el-table\n        ref=\"table\"\n        :data=\"tableData\"\n        row-key=\"id\"\n        @select=\"handleSelectionChange\"\n        @select-all=\"handleSelectAll\"\n        @row-click=\"handleRunTest\"\n        @filter-change=\"filter\"\n      >\n\n        <!--  复选框  -->\n        <el-table-column type=\"selection\"/>\n\n        <!--  复选按钮 -->\n        <el-table-column :resizable=\"false\" align=\"center\" width=\"40\">\n          <template slot-scope=\"scope\">\n            <show-more-btn\n              :buttons=\"buttons\"\n              :is-disabled=\"scope.row.isDisabled\"\n              :size=\"selectRows.size\"\n            />\n          </template>\n        </el-table-column>\n\n        <!--  名称  -->\n        <el-table-column label=\"名称\" prop=\"caseDetail.name\" show-overflow-tooltip/>\n\n        <!--  用例等级  -->\n        <el-table-column\n          :filters=\"priorityOptions\"\n          column-key=\"importance\"\n          label=\"用例等级\"\n          prop=\"caseDetail.importance\"\n          show-overflow-tooltip\n        >\n          <template slot-scope=\"scope\">\n            <priority-table-item :value=\"scope.row.caseDetail.importance\"/>\n          </template>\n        </el-table-column>\n\n        <!--  类型  -->\n        <el-table-column\n          column-key=\"caseDetail.caseType\"\n          label=\"类型\"\n          prop=\"caseDetail.caseType\"\n          show-overflow-tooltip\n        >\n          <template slot-scope=\"scope\">\n            <case-type-table-item :value=\"scope.row.caseDetail.caseType\"/>\n          </template>\n        </el-table-column>\n\n        <!--  测试方式  -->\n        <el-table-column\n          column-key=\"method\"\n          label=\"测试方式\"\n          prop=\"caseDetail.executionType\"\n          show-overflow-tooltip\n        >\n          <template slot-scope=\"scope\">\n            <execution-type-table-item :value=\"scope.row.caseDetail.executionType\"/>\n          </template>\n        </el-table-column>\n\n        <!--  所属模块  -->\n        <el-table-column label=\"所属模块\" prop=\"treePath\" show-overflow-tooltip/>\n\n        <!--  所属项目  -->\n        <el-table-column :filters=\"projects\" column-key=\"projId\" label=\"所属项目\" prop=\"projName\"/>\n\n        <!--  缺陷  -->\n        <el-table-column label=\"缺陷\" prop=\"issues\" show-overflow-tooltip/>\n\n        <!--  执行人  -->\n        <el-table-column\n          :filters=\"users\"\n          column-key=\"executor\"\n          label=\"执行人\"\n          prop=\"executor\"\n          show-overflow-tooltip\n        />\n\n        <!--  执行结果  -->\n        <el-table-column :filters=\"planResultOptions\" column-key=\"status\" label=\"执行结果\">\n          <template slot-scope=\"scope\">\n            <plan-case-status-table-item :value=\"scope.row.status\"/>\n          </template>\n        </el-table-column>\n\n        <!--  确认结果  -->\n        <el-table-column\n          v-if=\"planStage === planStageEnum.SMOKE\"\n          :filters=\"planResultOptions\"\n          column-key=\"smokeCheck\"\n          label=\"确认结果\"\n        >\n          <template slot-scope=\"scope\">\n            <plan-case-status-table-item :value=\"scope.row.smokeCheck\"/>\n          </template>\n        </el-table-column>\n\n        <!--  更新时间  -->\n        <el-table-column\n          :width=\"tableTimeWidth\"\n          label=\"更新时间\"\n          prop=\"updatedAt\"\n          show-overflow-tooltip\n          sortable\n        />\n\n        <!--  操作  -->\n        <el-table-column :width=\"table2BtnWidth\" label=\"操作\">\n          <template slot-scope=\"scope\">\n            <table-operator\n              delete-icon=\"el-icon-link\"\n              delete-tip=\"取消关联\"\n              show-delete\n              show-run\n              @deleteClick=\"handleDelete(scope.row)\"\n              @runClick=\"handleRunTest(scope.row)\"\n            />\n          </template>\n        </el-table-column>\n      </el-table>\n\n      <table-pagination\n        :change=\"initTableData\"\n        :current-page.sync=\"currentPage\"\n        :page-size.sync=\"pageSize\"\n        :total=\"total\"\n      />\n\n    </el-card>\n\n    <test-case-plan-run ref=\"testPlanTestCaseRun\" :plan-id=\"planId\" @refresh=\"refreshTable\"/>\n    <test-case-relevance ref=\"testCaseRelevance\" :plan-id=\"planId\" @refreshTable=\"refreshTable\"/>\n\n    <batch-edit\n      ref=\"batchEdit\"\n      :type-arr=\"caseBatchEditOptions\"\n      :value-arr=\"batchEditValueArr\"\n      dialog-title=\"批量编辑用例\"\n      @batchEdit=\"batchEdit\"\n    />\n\n  </div>\n</template>\n\n<script lang=\"ts\">\n\nimport {testCaseApi, testPlanApi} from \"@/api\"\nimport {RequestGetTestCasePlanCaseList, RequestUpdateTestCasePlanCaseList} from \"@/api/types/testPlan\"\nimport {typePlanData} from \"@/api/types/testPlanType\"\nimport {RequestUpdateTestCaseBatch} from \"@/api/types/testTrack\"\nimport {typeCaseStep} from \"@/api/types/testTrackType\"\nimport variables from \"@/assets/css/utils.scss\"\nimport TablePagination from \"@/common/components/pagination/TablePagination.vue\"\nimport TableHeader from \"@/common/components/TableHeader.vue\"\nimport TableOperator from \"@/common/components/TableOperator.vue\"\nimport {_filter, formatTime} from \"@/common/utils\"\nimport {PAGINATION_SIZE} from \"@/constant\"\nimport {PathName} from \"@/constant/routeData\"\nimport {caseTypeType, caseUpdateTypeEnum, executionType, priorityType, stepStatusEnum} from \"@/constant/TestCase\"\nimport {\n  caseBatchEditEnum,\n  caseBatchEditType,\n  planOperationEnum,\n  planResultType,\n  planStageEnum\n} from \"@/constant/TestPlan\"\nimport BatchEdit from \"@/pages/track/case/components/BatchEdit.vue\"\nimport ShowMoreBtn from \"@/pages/track/case/components/ShowMoreBtn.vue\"\nimport NodeBreadcrumb from \"@/pages/track/common/NodeBreadcrumb.vue\"\nimport CaseTypeTableItem from \"@/pages/track/common/tableItems/CaseTypeTableItem.vue\"\nimport ExecutionTypeTableItem from \"@/pages/track/common/tableItems/ExecutionTypeTableItem.vue\"\nimport PlanCaseStatusTableItem from \"@/pages/track/common/tableItems/PlanCaseStatusTableItem.vue\"\nimport PriorityTableItem from \"@/pages/track/common/tableItems/PriorityTableItem.vue\"\nimport {getModuleByTreeId} from \"@/pages/track/common/utils\"\nimport TestCasePlanRun from \"@/pages/track/plan/view/comonents/TestCasePlanRun.vue\"\nimport TestCaseRelevance from \"@/pages/track/plan/view/comonents/TestCaseRelevance.vue\"\n\n// 执行方式\nconst executionOptions = Object.entries(executionType).map(([value, text]) => {\n  return {text: text, value: value}\n})\n// 用例优先级\nconst priorityOptions = Object.entries(priorityType).map(([value, text]) => {\n  return {text: text, value: value}\n})\n// 计划用例状态\nconst planResultOptions = Object.entries(planResultType).map(([value, text]) => {\n  return {text: text, value: value}\n})\n// 用例类型\nconst caseTypeOptions = Object.entries(caseTypeType).map(([value, text]) => {\n  return {text: text, value: value}\n})\n// 批量编辑类型\nconst caseBatchEditOptions = Object.entries(caseBatchEditType).map(([value, text]) => {\n  return {text: text, value: value}\n})\n\nexport default {\n  name: \"TestCasePlanList\",\n  components: {\n    BatchEdit,\n    TestCasePlanRun,\n    ExecutionTypeTableItem,\n    CaseTypeTableItem,\n    PlanCaseStatusTableItem,\n    PriorityTableItem,\n    ShowMoreBtn,\n    NodeBreadcrumb,\n    TableOperator,\n    TablePagination,\n    TableHeader,\n    TestCaseRelevance,\n  },\n  data() {\n    return {\n      executionOptions: executionOptions,\n      priorityOptions: priorityOptions,\n      planResultOptions: planResultOptions,\n      caseTypeOptions: caseTypeOptions,\n      caseBatchEditOptions: caseBatchEditOptions,\n      planStageEnum: planStageEnum,\n      users: this.users,\n      projects: this.projects,\n      condition: {},\n      buttons: [\n        {name: '批量编辑用例', handleClick: this.handleBatchEdit},\n        {name: '批量取消关联', handleClick: this.handleBatchUnRelate},\n      ],\n      allCase: false,\n      tableData: [],\n      selectRows: new Set(),\n      currentPage: 1,\n      pageSize: PAGINATION_SIZE.LARGE,\n      total: 0,\n      caseFilter: {},\n      batchEditValueArr: {\n        // 执行方式\n        result: planResultOptions,\n        // 维护人\n        executor: [],\n      },\n      planStage: '',\n      isQa: false,\n    }\n  },\n  props: {\n    treeNodes: Array,\n    selectNode: Object,\n    selectParentNodes: Array,\n  },\n  inject: ['projects', 'users'],\n  computed: {\n    planId() {\n      return this.$route.params.planId\n    },\n    projId() {\n      return this.$route.query.projId\n    },\n    treeId() {\n      return this.$route.query.treeId\n    },\n    caseIds() {\n      return Array.from(this.selectRows).map((row: { caseId: string }) => row.caseId)\n    },\n    table2BtnWidth() {\n      return variables['table2BtnWidth']\n    },\n    tableTimeWidth() {\n      return variables['tableTimeWidth']\n    }\n  },\n  watch: {\n    '$route'() {\n      this.initTableData()\n    },\n    treeNodes() {\n      this.initTableData()\n    },\n  },\n  mounted() {\n    this.getPlanDetail()\n  },\n  methods: {\n    setSelectOptions() {\n      this.setPriorityOptions()\n      this.setProjectOptions()\n      this.setCaseTypeOptions()\n      this.setExecutorOptions()\n    },\n    initTableData() {\n      this.setSelectOptions()\n      this.getData()\n    },\n    async getData(value?: string) {\n      let params: RequestGetTestCasePlanCaseList = {\n        offset: this.pageSize * (this.currentPage - 1),\n        limit: this.pageSize,\n        name: value,\n        treeId: this.treeId,\n        projId: this.treeId ? undefined : this.projId\n      }\n\n      this.caseFilter = sessionStorage.getItem(this.$route.path)\n      this.caseFilter = this.caseFilter ? JSON.parse(this.caseFilter) : {}\n      if (JSON.stringify(this.caseFilter) !== \"{}\") {\n        Object.assign(params, this.caseFilter)\n        this.$refs.table.columns.forEach((item: any) => {\n          item.filteredValue = this.caseFilter[item.columnKey]\n        })\n      }\n\n      await testPlanApi.getTestCasePlanCaseList(this.planId, params)\n        .then(({data}) => {\n          this.total = data.total\n          this.tableData = data.data\n          this.tableData.forEach((item: any) => {\n            item.treePath = getModuleByTreeId(this.treeNodes, item.treeId).path\n            item.updatedAt = formatTime(item.updatedAt)\n            item.projName = this.projects.find((obj: any) => obj.id === item.projId).name\n            item.caseDetail.steps.forEach((obj: typeCaseStep) => {\n              obj.actualStatus = stepStatusEnum.PASS\n            })\n            item.stepActualStatus.forEach((obj: stepStatusEnum, index: number) => {\n              item.caseDetail.steps[index].actualStatus = obj || stepStatusEnum.PASS\n            })\n            item.stepActualResults.forEach((obj: string, index: number) => {\n              item.caseDetail.steps[index].actualResult = obj\n            })\n          })\n        })\n    },\n    getPlanDetail() {\n      testPlanApi.getTestCasePlanDetail(this.planId)\n        .then((data: any) => {\n          this.planStage = data.stage\n        })\n    },\n    handleSwitch() {\n      Object.assign(\n        this.caseFilter,\n        {executor: this.allCase ? undefined : this.$store.state.login.username}\n      )\n      this.getData()\n      this.allCase = !this.allCase\n    },\n    handleSearch(value?: string) {\n      this.currentPage = 1\n      this.getData(value)\n    },\n    handleRunTest(testCase?: typePlanData) {\n      if (!testCase) testCase = this.tableData[0]\n      this.$eventBus.$emit(\"testPlanCaseRun\", testCase, this.tableData, this)\n    },\n    handleSelectAll(selection: Object[]) {\n      if (selection.length > 0) {\n        this.tableData.forEach((item: any) => {\n          this.$set(item, \"isDisabled\", false)\n        })\n        this.selectRows = new Set(selection)\n      } else {\n        this.selectRows.clear()\n        this.tableData.forEach((row: any) => {\n          this.$set(row, \"isDisabled\", true)\n        })\n      }\n    },\n    handleSelectionChange(selection: Object[], row: any) {\n      if (selection.indexOf(row) === -1) {\n        this.$set(row, \"isDisabled\", true)\n      } else {\n        this.$set(row, \"isDisabled\", false)\n      }\n      this.selectRows = new Set(selection)\n    },\n    handleRelateCase() {\n      this.$refs.testCaseRelevance.open(this.condition, this.projId)\n    },\n    handleBatchEdit() {\n      this.$refs.batchEdit.open()\n    },\n    handleBatchUnRelate() {\n      this.handleDelete('', true)\n    },\n    batchEdit(editForm: any) {\n      let body: RequestUpdateTestCaseBatch = {\n        caseIds: this.caseIds,\n        planId: this.planId,\n        type: caseUpdateTypeEnum.UPDATE_PLAN_STATUS,\n      }\n      if (editForm.type === caseBatchEditEnum.EXECUTOR) {\n        body = Object.assign(body, {\n          type: caseUpdateTypeEnum.UPDATE_PLAN_EXECUTOR,\n          executor: editForm.value,\n        })\n      } else if (editForm.type === caseBatchEditEnum.RESULT) {\n        if (this.isQa) {\n          body = Object.assign(body, {\n            type: caseUpdateTypeEnum.UPDATE_PLAN_SMOKE_CHECK,\n            smokeCheck: editForm.value,\n          })\n        } else {\n          body = Object.assign(body, {\n            status: editForm.value,\n          })\n        }\n      }\n      testCaseApi.updateTestCaseBatch(body)\n        .then(() => {\n          this.refreshTable()\n        })\n    },\n    refreshTable() {\n      this.$emit('refresh')\n    },\n    handleDelete(row?: any, isBatch?: boolean) {\n      const msg = row || isBatch ? '确认取消关联测试用例?' : '确认取消全部关联测试用例?'\n      this.$alert(msg, '', {\n        confirmButtonText: '确定',\n        showCancelButton: true,\n        cancelButtonText: '取消',\n        callback: (action: string) => {\n          if (action === 'confirm') {\n            let body: RequestUpdateTestCasePlanCaseList = {\n              operation: planOperationEnum.REMOVE,\n              caseIds: isBatch ? this.caseIds : (row ? [row.caseId] : []),\n              projId: this.projId,\n              treeId: this.treeId,\n            }\n            testPlanApi.updateTestCasePlanCaseList(this.planId, body)\n              .then(() => {\n                this.refreshTable()\n              })\n          }\n        }\n      })\n    },\n    filter(filters: any) {\n      this.currentPage = 1\n      _filter(filters, this.caseFilter, this.$route.path)\n      this.initTableData()\n    },\n    setReviewerOptions() {\n      this.condition.reviewerOptions = this.users\n    },\n    setProjectOptions() {\n      this.condition.projectOptions = this.treeNodes\n    },\n    setPriorityOptions() {\n      this.condition.priorityOptions = this.priorityOptions\n    },\n    setCaseTypeOptions() {\n      this.condition.caseTypeOptions = this.caseTypeOptions\n    },\n    setExecutorOptions() {\n      this.batchEditValueArr.executor = this.users\n    },\n    handleRowClick(row: any) {\n      this.$router.push({\n        name: PathName.TestTrackCaseReviewView,\n        params: {reviewId: row.id},\n      })\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.el-table {\n  cursor: pointer;\n}\n\n</style>\n"]}]}