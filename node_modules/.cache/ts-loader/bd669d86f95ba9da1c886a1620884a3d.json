{"remainingRequest":"/Users/jlglqa/Documents/QA/noa/node_modules/babel-loader/lib/index.js!/Users/jlglqa/Documents/QA/noa/node_modules/ts-loader/index.js??ref--14-2!/Users/jlglqa/Documents/QA/noa/node_modules/eslint-loader/index.js??ref--13-0!/Users/jlglqa/Documents/QA/noa/src/api/coverage.ts","dependencies":[{"path":"/Users/jlglqa/Documents/QA/noa/src/api/coverage.ts","mtime":1655949681742},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/cache-loader/dist/cjs.js","mtime":1644298102062},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/babel-loader/lib/index.js","mtime":1644314985388},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/ts-loader/index.js","mtime":1644314987889},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/eslint-loader/index.js","mtime":1644298104993}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKdmFyIF9faW1wb3J0RGVmYXVsdCA9IHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQgfHwgZnVuY3Rpb24gKG1vZCkgewogIHJldHVybiBtb2QgJiYgbW9kLl9fZXNNb2R1bGUgPyBtb2QgOiB7CiAgICAiZGVmYXVsdCI6IG1vZAogIH07Cn07CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMuY292ZXJhZ2VBcGkgPSB2b2lkIDA7Cgp2YXIgaW5kZXhfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKCJAL2FwaS9pbmRleCIpKTsKCnZhciBxc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoInFzIikpOwoKdmFyIHVybFByZWZpeCA9ICd2MS9jb3ZlcmFnZSc7CnZhciB1cmxHaXRQcmVmaXggPSAndjEvZ2l0bGFiJzsKZXhwb3J0cy5kZWZhdWx0ID0gewogIC8vIOiOt+WPluaJgOaciWdpdOW3peeoiwogIGdldEFsbEdpdFByb2plY3RzOiBmdW5jdGlvbiBnZXRBbGxHaXRQcm9qZWN0cygpIHsKICAgIHJldHVybiBpbmRleF8xLmRlZmF1bHQoewogICAgICBtZXRob2Q6ICdnZXQnLAogICAgICB1cmw6IHVybFByZWZpeCArICIvZ2l0L3Byb2plY3QiCiAgICB9KTsKICB9LAogIC8vIOiOt+WPlua1geawtOe6v+ivpuaDhQogIGdldFBpcGVsaW5lSW5mbzogZnVuY3Rpb24gZ2V0UGlwZWxpbmVJbmZvKGlkKSB7CiAgICByZXR1cm4gaW5kZXhfMS5kZWZhdWx0KHsKICAgICAgbWV0aG9kOiAnZ2V0JywKICAgICAgdXJsOiB1cmxQcmVmaXggKyAiL3BpcGVsaW5lLyIgKyBpZAogICAgfSk7CiAgfSwKICAvLyDliJvlu7rmtYHmsLTnur8KICBjcmVhdGVQaXBlbGluZTogZnVuY3Rpb24gY3JlYXRlUGlwZWxpbmUocGFyYW1zKSB7CiAgICByZXR1cm4gaW5kZXhfMS5kZWZhdWx0KHsKICAgICAgbWV0aG9kOiAncG9zdCcsCiAgICAgIHVybDogdXJsUHJlZml4ICsgIi9waXBlbGluZSIsCiAgICAgIGRhdGE6IHBhcmFtcwogICAgfSk7CiAgfSwKICAvLyDnvJbovpHmtYHmsLTnur8KICB1cGRhdGVQaXBlbGluZTogZnVuY3Rpb24gdXBkYXRlUGlwZWxpbmUoaWQsIHBhcmFtcykgewogICAgcmV0dXJuIGluZGV4XzEuZGVmYXVsdCh7CiAgICAgIG1ldGhvZDogJ3BhdGNoJywKICAgICAgdXJsOiB1cmxQcmVmaXggKyAiL3BpcGVsaW5lLyIgKyBpZCwKICAgICAgZGF0YTogcGFyYW1zCiAgICB9KTsKICB9LAogIC8vIOWIoOmZpOa1geawtOe6vwogIGRlbGV0ZVBpcGVsaW5lOiBmdW5jdGlvbiBkZWxldGVQaXBlbGluZShpZCkgewogICAgcmV0dXJuIGluZGV4XzEuZGVmYXVsdCh7CiAgICAgIG1ldGhvZDogJ2RlbGV0ZScsCiAgICAgIHVybDogdXJsUHJlZml4ICsgIi9waXBlbGluZS8iICsgaWQKICAgIH0pOwogIH0sCiAgLy8g6I635Y+W5rWB5rC057q/5YiX6KGoCiAgZ2V0UGlwZWxpbmVMaXN0OiBmdW5jdGlvbiBnZXRQaXBlbGluZUxpc3QocGFyYW1zKSB7CiAgICByZXR1cm4gaW5kZXhfMS5kZWZhdWx0KHsKICAgICAgbWV0aG9kOiAnZ2V0JywKICAgICAgdXJsOiB1cmxQcmVmaXggKyAiL3BpcGVsaW5lIiwKICAgICAgcGFyYW1zOiBwYXJhbXMsCiAgICAgIHBhcmFtc1NlcmlhbGl6ZXI6IGZ1bmN0aW9uIHBhcmFtc1NlcmlhbGl6ZXIocGFyYW1zKSB7CiAgICAgICAgcmV0dXJuIHFzXzEuZGVmYXVsdC5zdHJpbmdpZnkocGFyYW1zLCB7CiAgICAgICAgICBhcnJheUZvcm1hdDogJ3JlcGVhdCcKICAgICAgICB9KTsKICAgICAgfQogICAgfSk7CiAgfSwKICAvLyDojrflj5bmn5DmtYHmsLTnur/mnI3liqHnq6/lj5HniYhjb25zb2xlCiAgZ2V0UGlwZWxpbmVEZXBsb3lDb25zb2xlOiBmdW5jdGlvbiBnZXRQaXBlbGluZURlcGxveUNvbnNvbGUoaWQpIHsKICAgIHJldHVybiBpbmRleF8xLmRlZmF1bHQoewogICAgICBtZXRob2Q6ICdnZXQnLAogICAgICB1cmw6IHVybFByZWZpeCArICIvcGlwZWxpbmUvIiArIGlkICsgIi9kZXBsb3kvY29uc29sZSIKICAgIH0pOwogIH0sCiAgZ2V0UGlwZWxpbmVDb3ZlcmFnZUNvbnNvbGU6IGZ1bmN0aW9uIGdldFBpcGVsaW5lQ292ZXJhZ2VDb25zb2xlKGlkKSB7CiAgICByZXR1cm4gaW5kZXhfMS5kZWZhdWx0KHsKICAgICAgbWV0aG9kOiAnZ2V0JywKICAgICAgdXJsOiB1cmxQcmVmaXggKyAiL3BpcGVsaW5lLyIgKyBpZCArICIvY292ZXJhZ2UvY29uc29sZSIKICAgIH0pOwogIH0sCiAgLy8g5p+l55yL5rWB5rC057q/55qE5p6E5bu66K6w5b2VCiAgZ2V0SmVua2luc1Rhc2tzSGlzdG9yeTogZnVuY3Rpb24gZ2V0SmVua2luc1Rhc2tzSGlzdG9yeShwYXJhbXMpIHsKICAgIHJldHVybiBpbmRleF8xLmRlZmF1bHQoewogICAgICBtZXRob2Q6ICdnZXQnLAogICAgICB1cmw6IHVybFByZWZpeCArICIvamVua2lucy90YXNrIiwKICAgICAgcGFyYW1zOiBwYXJhbXMKICAgIH0pOwogIH0sCiAgLy8g6Kem5Y+R5pyN5Yqh5p6E5bu6CiAgdHJpZ2dlclNlcnZlckRlcGxveTogZnVuY3Rpb24gdHJpZ2dlclNlcnZlckRlcGxveShwYXJhbXMpIHsKICAgIHJldHVybiBpbmRleF8xLmRlZmF1bHQoewogICAgICBtZXRob2Q6ICdwb3N0JywKICAgICAgdXJsOiB1cmxQcmVmaXggKyAiL2plbmtpbnMvdGFzay9zZXJ2ZXIvZGVwbG95IiwKICAgICAgZGF0YTogcGFyYW1zCiAgICB9KTsKICB9LAogIC8vIOinpuWPkeimhueblueOh+aKpeWRiuaehOW7ugogIHRyaWdnZXJDb3ZlcmFnZURlcGxveTogZnVuY3Rpb24gdHJpZ2dlckNvdmVyYWdlRGVwbG95KHBhcmFtcykgewogICAgcmV0dXJuIGluZGV4XzEuZGVmYXVsdCh7CiAgICAgIG1ldGhvZDogJ3Bvc3QnLAogICAgICB1cmw6IHVybFByZWZpeCArICIvamVua2lucy90YXNrIiwKICAgICAgZGF0YTogcGFyYW1zCiAgICB9KTsKICB9LAogIC8vIOinpuWPkXNvbmFy5p6E5bu6CiAgdHJpZ2dlclNvbmFyQnVpbGQ6IGZ1bmN0aW9uIHRyaWdnZXJTb25hckJ1aWxkKHBhcmFtcykgewogICAgcmV0dXJuIGluZGV4XzEuZGVmYXVsdCh7CiAgICAgIG1ldGhvZDogJ3Bvc3QnLAogICAgICB1cmw6IHVybFByZWZpeCArICIvamVua2lucy90YXNrL3NlcnZlci9zb25hciIsCiAgICAgIGRhdGE6IHBhcmFtcwogICAgfSk7CiAgfSwKICAvLyDmn6XnnIvmnI3liqHnq6/lj5HniYjorrDlvZUKICBnZXRTZXJ2ZXJKZW5raW5zRGVwbG95SGlzdG9yeTogZnVuY3Rpb24gZ2V0U2VydmVySmVua2luc0RlcGxveUhpc3RvcnkocGFyYW1zKSB7CiAgICByZXR1cm4gaW5kZXhfMS5kZWZhdWx0KHsKICAgICAgbWV0aG9kOiAnZ2V0JywKICAgICAgdXJsOiB1cmxQcmVmaXggKyAiL2plbmtpbnMvc2VydmVyL2RlcGxveS9oaXN0b3J5IiwKICAgICAgcGFyYW1zOiBwYXJhbXMKICAgIH0pOwogIH0sCiAgLy8gZ2l0bGFiIOWIhuaUr+euoeeQhuebuOWFswogIC8vIOiOt+WPlnByb2plY3RzCiAgZ2V0R2l0bGFiUHJvamVjdHM6IGZ1bmN0aW9uIGdldEdpdGxhYlByb2plY3RzKHBhcmFtcykgewogICAgcmV0dXJuIGluZGV4XzEuZGVmYXVsdCh7CiAgICAgIG1ldGhvZDogJ2dldCcsCiAgICAgIHVybDogdXJsR2l0UHJlZml4ICsgIi9wcm9qZWN0cyIsCiAgICAgIHBhcmFtczogcGFyYW1zCiAgICB9KTsKICB9LAogIC8vIOiOt+WPluaMh+WumuW3peeoi+eahGJyYW5jaGVzCiAgZ2V0R2l0bGFiUHJvamVjdEJyYW5jaGVzOiBmdW5jdGlvbiBnZXRHaXRsYWJQcm9qZWN0QnJhbmNoZXMocGlkLCBwYXJhbXMpIHsKICAgIHJldHVybiBpbmRleF8xLmRlZmF1bHQoewogICAgICBtZXRob2Q6ICdnZXQnLAogICAgICB1cmw6IHVybEdpdFByZWZpeCArICIvcHJvamVjdC8iICsgcGlkICsgIi9icmFuY2giLAogICAgICBwYXJhbXM6IHBhcmFtcwogICAgfSk7CiAgfSwKICAvLyDnu5nmjIflrprlt6XnqIvliJvlu7rliIbmlK8KICBjcmVhdGVHaXRsYWJQcm9qZWN0QnJhbmNoOiBmdW5jdGlvbiBjcmVhdGVHaXRsYWJQcm9qZWN0QnJhbmNoKHBpZCwgcGFyYW1zKSB7CiAgICByZXR1cm4gaW5kZXhfMS5kZWZhdWx0KHsKICAgICAgbWV0aG9kOiAncG9zdCcsCiAgICAgIHVybDogdXJsR2l0UHJlZml4ICsgIi9wcm9qZWN0LyIgKyBwaWQgKyAiL2JyYW5jaCIsCiAgICAgIGRhdGE6IHBhcmFtcwogICAgfSk7CiAgfSwKICAvLyDliKDpmaTmjIflrprliIbmlK8KICBkZWxldGVHaXRsYWJQcm9qZWN0QnJhbmNoOiBmdW5jdGlvbiBkZWxldGVHaXRsYWJQcm9qZWN0QnJhbmNoKHBpZCwgcGFyYW1zKSB7CiAgICByZXR1cm4gaW5kZXhfMS5kZWZhdWx0KHsKICAgICAgbWV0aG9kOiAnZGVsZXRlJywKICAgICAgdXJsOiB1cmxHaXRQcmVmaXggKyAiL3Byb2plY3QvIiArIHBpZCArICIvYnJhbmNoIiwKICAgICAgcGFyYW1zOiBwYXJhbXMKICAgIH0pOwogIH0sCiAgLy8g5p+l55yL5YWo6YeP6KaG55uW546H6LaL5Yq/CiAgZ2V0RnVsbENvdmVyYWdlUmVwb3J0VHJlbmQ6IGZ1bmN0aW9uIGdldEZ1bGxDb3ZlcmFnZVJlcG9ydFRyZW5kKHBhcmFtcykgewogICAgcmV0dXJuIGluZGV4XzEuZGVmYXVsdCh7CiAgICAgIG1ldGhvZDogJ2dldCcsCiAgICAgIHVybDogdXJsUHJlZml4ICsgIi9mdWxsL3JlcG9ydC90cmVuZCIsCiAgICAgIHBhcmFtczogcGFyYW1zCiAgICB9KTsKICB9Cn07Cgp2YXIgY292ZXJhZ2VBcGkgPQovKiogQGNsYXNzICovCmZ1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBjb3ZlcmFnZUFwaSgpIHt9CgogIHJldHVybiBjb3ZlcmFnZUFwaTsKfSgpOwoKZXhwb3J0cy5jb3ZlcmFnZUFwaSA9IGNvdmVyYWdlQXBpOw=="},{"version":3,"sources":["/Users/jlglqa/Documents/QA/noa/node_modules/eslint-loader/index.js??ref--13-0!/Users/jlglqa/Documents/QA/noa/src/api/coverage.ts"],"names":[],"mappings":"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","sourcesContent":["import instance from '@/api/index'\nimport Qs from \"qs\"\nconst urlPrefix = 'v1/coverage'\nconst urlGitPrefix = 'v1/gitlab'\nexport default {\n  // 获取所有git工程\n  getAllGitProjects() {\n    return instance({\n      method: 'get',\n      url: `${urlPrefix}/git/project`\n    })\n  },\n  // 获取流水线详情\n  getPipelineInfo(id: any) {\n    return instance({\n      method: 'get',\n      url: `${urlPrefix}/pipeline/${id}`,\n    })\n  },\n  // 创建流水线\n  createPipeline(params: Object) {\n    return instance({\n      method: 'post',\n      url: `${urlPrefix}/pipeline`,\n      data: params,\n    })\n  },\n  // 编辑流水线\n  updatePipeline(id: any, params: Object) {\n    return instance({\n      method: 'patch',\n      url: `${urlPrefix}/pipeline/${id}`,\n      data: params\n    })\n  },\n  // 删除流水线\n  deletePipeline(id: any) {\n    return instance({\n      method: 'delete',\n      url: `${urlPrefix}/pipeline/${id}`,\n    })\n  },\n  // 获取流水线列表\n  getPipelineList(params: Object) {\n    return instance({\n      method: 'get',\n      url: `${urlPrefix}/pipeline`,\n      params: params,\n      paramsSerializer(params) {\n        return Qs.stringify(params, {arrayFormat: 'repeat'})\n      }\n    })\n  },\n  // 获取某流水线服务端发版console\n  getPipelineDeployConsole(id: any) {\n    return instance({\n      method: 'get',\n      url: `${urlPrefix}/pipeline/${id}/deploy/console`\n    })\n  },\n  getPipelineCoverageConsole(id: any) {\n    return instance({\n      method: 'get',\n      url: `${urlPrefix}/pipeline/${id}/coverage/console`\n    })\n  },\n  // 查看流水线的构建记录\n  getJenkinsTasksHistory(params: Object) {\n    return instance({\n      method: 'get',\n      url: `${urlPrefix}/jenkins/task`,\n      params: params\n    })\n  },\n  // 触发服务构建\n  triggerServerDeploy(params: Object) {\n    return instance({\n      method: 'post',\n      url: `${urlPrefix}/jenkins/task/server/deploy`,\n      data: params\n    })\n  },\n  // 触发覆盖率报告构建\n  triggerCoverageDeploy(params: Object) {\n    return instance({\n      method: 'post',\n      url: `${urlPrefix}/jenkins/task`,\n      data: params\n    })\n  },\n  // 触发sonar构建\n  triggerSonarBuild(params: Object) {\n    return instance({\n      method: 'post',\n      url: `${urlPrefix}/jenkins/task/server/sonar`,\n      data: params\n    })\n  },\n  // 查看服务端发版记录\n  getServerJenkinsDeployHistory(params: Object) {\n    return instance({\n      method: 'get',\n      url: `${urlPrefix}/jenkins/server/deploy/history`,\n      params: params\n    })\n  },\n\n  // gitlab 分支管理相关\n  // 获取projects\n  getGitlabProjects(params: any) {\n    return instance({\n      method: 'get',\n      url: `${urlGitPrefix}/projects`,\n      params: params\n    })\n  },\n  // 获取指定工程的branches\n  getGitlabProjectBranches(pid: string, params: any) {\n    return instance({\n      method: 'get',\n      url: `${urlGitPrefix}/project/${pid}/branch`,\n      params: params\n    })\n  },\n  // 给指定工程创建分支\n  createGitlabProjectBranch(pid: string, params: any) {\n    return instance({\n      method: 'post',\n      url: `${urlGitPrefix}/project/${pid}/branch`,\n      data: params\n    })\n  },\n  // 删除指定分支\n  deleteGitlabProjectBranch(pid: string, params: any) {\n    return instance({\n      method: 'delete',\n      url: `${urlGitPrefix}/project/${pid}/branch`,\n      params: params\n    })\n  } ,\n  // 查看全量覆盖率趋势\n  getFullCoverageReportTrend(params: any) {\n    return instance({\n      method: 'get',\n      url: `${urlPrefix}/full/report/trend`,\n      params: params\n    })\n  }\n  \n}\n\nexport class coverageApi {\n}\n"],"sourceRoot":""}]}