{"remainingRequest":"/Users/jlglqa/Documents/QA/noa/node_modules/babel-loader/lib/index.js!/Users/jlglqa/Documents/QA/noa/node_modules/ts-loader/index.js??ref--14-2!/Users/jlglqa/Documents/QA/noa/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/jlglqa/Documents/QA/noa/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jlglqa/Documents/QA/noa/src/pages/track/review/view/components/TestReviewTestCaseEdit.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Users/jlglqa/Documents/QA/noa/src/pages/track/review/view/components/TestReviewTestCaseEdit.vue","mtime":1655949681808},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/cache-loader/dist/cjs.js","mtime":1644298102062},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/babel-loader/lib/index.js","mtime":1644314985388},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/ts-loader/index.js","mtime":1644314987889},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/cache-loader/dist/cjs.js","mtime":1644298102062},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/vue-loader/lib/index.js","mtime":1644314988580},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/cache-loader/dist/cjs.js","mtime":1644298102062},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/babel-loader/lib/index.js","mtime":1644314985388},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/ts-loader/index.js","mtime":1644314987889},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/cache-loader/dist/cjs.js","mtime":1644298102062},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/vue-loader/lib/index.js","mtime":1644314988580}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/jlglqa/Documents/QA/noa/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/jlglqa/Documents/QA/noa/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jlglqa/Documents/QA/noa/src/pages/track/review/view/components/TestReviewTestCaseEdit.vue?vue&type=script&lang=ts&"],"names":[],"mappings":"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","sourcesContent":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport {testCaseApi} from \"@/api\"\nimport {RequestUpdateTestCase} from \"@/api/types/testTrack\"\nimport {typeCaseData} from \"@/api/types/testTrackType\"\nimport {\n  caseTypeEnum,\n  caseTypeType,\n  caseUpdateTypeEnum,\n  executionEnum,\n  executionType,\n  priorityType,\n  stepStatusEnum,\n  stepStatusType\n} from \"@/constant/TestCase\"\nimport {reviewCaseStatusEnum} from \"@/constant/TestReivew\"\nimport TestReviewCaseStepStatus from \"@/pages/track/review/commom/TestReviewCaseStepStatus.vue\"\n\n// 用例步骤执行结果\nconst stepStatusOptions = Object.entries(stepStatusType).map(([value, text]) => {\n  return {text: text, value: value}\n})\n\nexport default {\n  name: \"TestReviewTestCaseEdit\",\n  components: {\n    TestReviewCaseStepStatus,\n  },\n  data() {\n    return {\n      reviewCaseStatusEnum: reviewCaseStatusEnum,\n      caseTypeEnum: caseTypeEnum,\n      executionEnum: executionEnum,\n      priorityType: priorityType,\n      executionType: executionType,\n      caseTypeType: caseTypeType,\n      stepStatusOptions: stepStatusOptions,\n      showDialog: false,\n      testCase: {},\n      index: 0,\n      total: 0,\n      parent: '',\n      tableData: [],\n      testStatus: '',\n      activeTab: 'detail',\n      isFailure: true,\n    }\n  },\n  props: {\n    readOnly: {\n      type: Boolean,\n      default: false\n    }\n  },\n  computed: {\n    loading() {\n      return this.$store.state.loading\n    },\n    reviewId() {\n      return this.$route.params.reviewId\n    },\n    offset() {\n      return this.parent.pageSize * (this.parent.currentPage - 1)\n    }\n  },\n  inject: ['projects'],\n  mounted() {\n    this.$eventBus.$on('testReviewCaseRun', (testcase: typeCaseData, tableData: typeCaseData[], parent: any) => {\n      this.parent = parent\n      this.open(testcase, tableData)\n    })\n  },\n  methods: {\n    cancel() {\n      this.showDialog = false\n      // this.$emit('refresh')\n    },\n    saveCase(status: reviewCaseStatusEnum) {\n      this.testStatus = status\n      const body: RequestUpdateTestCase = {\n        type: caseUpdateTypeEnum.UPDATE_REVIEW_STATUS,\n        status: status,\n        reviewId: this.reviewId,\n      }\n      testCaseApi.updateTestCase(this.testCase.id, body)\n        .then(() => {\n          this.testCase.status = status\n          this.handleNext()\n        })\n    },\n    async handleNext() {\n      if (this.index + this.offset + 1 === this.total) {\n        return\n      }\n      // 超过当前页总数时，触发翻页\n      if (this.index + 1 !== this.tableData.length) {\n        this.index++\n        this.getTestCase(this.index)\n      } else {\n        try {\n          this.parent.currentPage++\n          // 重置列表索引\n          this.index = -1\n          await this.parent.getData()\n          this.tableData = this.parent.tableData\n          await this.handleNext()\n        } catch {\n          // 恢复列表索引\n          this.index = this.parent.pageSize - 1\n          this.parent.currentPage--\n        }\n      }\n    },\n    async handlePre() {\n      if (this.index !== 0) {\n        this.index--\n        this.getTestCase(this.index)\n      } else {\n        try {\n          this.parent.currentPage--\n          // 重置列表索引\n          this.index = this.parent.pageSize\n          await this.parent.getData()\n          this.tableData = this.parent.tableData\n          await this.handlePre()\n        } catch {\n          // 恢复列表索引\n          this.index = this.parent.pageSize + 1\n          this.parent.currentPage++\n        }\n      }\n    },\n    getTestCase(index: number) {\n      this.testCase = this.tableData[index]\n    },\n    open(testCase: typeCaseData, tableData: typeCaseData[]) {\n      this.activeTab = 'detail'\n      this.total = this.parent.total\n      this.testCase = testCase\n      this.tableData = tableData\n      this.index = this.tableData.indexOf(testCase)\n      this.showDialog = true\n    },\n    stepResultChange() {\n      if (this.testCase.method === executionEnum.MANUAL) {\n        this.isFailure = this.testCase.caseDetail.steps.filter((s: { actualStatus: stepStatusEnum }) => {\n          return s.actualStatus === stepStatusEnum.FAIL || s.actualStatus === stepStatusEnum.BLOCK\n        }).length > 0\n      }\n    },\n  }\n}\n"],"sourceRoot":""}]}