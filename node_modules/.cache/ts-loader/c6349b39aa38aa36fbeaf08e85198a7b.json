{"remainingRequest":"/Users/jlglqa/Documents/QA/noa/node_modules/babel-loader/lib/index.js!/Users/jlglqa/Documents/QA/noa/node_modules/ts-loader/index.js??ref--14-2!/Users/jlglqa/Documents/QA/noa/node_modules/eslint-loader/index.js??ref--13-0!/Users/jlglqa/Documents/QA/noa/src/api/testCase.ts","dependencies":[{"path":"/Users/jlglqa/Documents/QA/noa/src/api/testCase.ts","mtime":1655949681743},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/cache-loader/dist/cjs.js","mtime":1644298102062},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/babel-loader/lib/index.js","mtime":1644314985388},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/ts-loader/index.js","mtime":1644314987889},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/eslint-loader/index.js","mtime":1644298104993}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKdmFyIF9faW1wb3J0RGVmYXVsdCA9IHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQgfHwgZnVuY3Rpb24gKG1vZCkgewogIHJldHVybiBtb2QgJiYgbW9kLl9fZXNNb2R1bGUgPyBtb2QgOiB7CiAgICAiZGVmYXVsdCI6IG1vZAogIH07Cn07CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7Cgp2YXIgaW5kZXhfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKCJAL2FwaS9pbmRleCIpKTsgLy8gQHRzLWlnbm9yZQoKCnZhciBxc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoInFzIikpOwoKZXhwb3J0cy5kZWZhdWx0ID0gewogIC8vIOiOt+WPlueUqOS+i+agkQogIGdldFRlc3RDYXNlTW9kdWxlczogZnVuY3Rpb24gZ2V0VGVzdENhc2VNb2R1bGVzKHBhcmFtcykgewogICAgcmV0dXJuIGluZGV4XzEuZGVmYXVsdCh7CiAgICAgIG1ldGhvZDogJ2dldCcsCiAgICAgIHVybDogJ3YxL3Rlc3QvY2FzZS90cmVlJywKICAgICAgcGFyYW1zOiBwYXJhbXMKICAgIH0pOwogIH0sCiAgLy8g57yW6L6R55So5L6L5qCRCiAgdXBkYXRlVGVzdENhc2VNb2R1bGVzOiBmdW5jdGlvbiB1cGRhdGVUZXN0Q2FzZU1vZHVsZXMobm9kZUlkLCBib2R5KSB7CiAgICByZXR1cm4gaW5kZXhfMS5kZWZhdWx0KHsKICAgICAgbWV0aG9kOiAncGF0Y2gnLAogICAgICB1cmw6ICJ2MS90ZXN0L2Nhc2UvdHJlZS8iICsgbm9kZUlkLAogICAgICBkYXRhOiBib2R5CiAgICB9KTsKICB9LAogIC8vIOaWsOWinueUqOS+i+agkQogIGNyZWF0ZVRlc3RDYXNlTW9kdWxlczogZnVuY3Rpb24gY3JlYXRlVGVzdENhc2VNb2R1bGVzKGJvZHkpIHsKICAgIHJldHVybiBpbmRleF8xLmRlZmF1bHQoewogICAgICBtZXRob2Q6ICdwb3N0JywKICAgICAgdXJsOiAndjEvdGVzdC9jYXNlL3RyZWUnLAogICAgICBkYXRhOiBib2R5CiAgICB9KTsKICB9LAogIC8vIOWIoOmZpOeUqOS+i+agkQogIGRlbGV0ZVRlc3RDYXNlTW9kdWxlczogZnVuY3Rpb24gZGVsZXRlVGVzdENhc2VNb2R1bGVzKG5vZGVJZCkgewogICAgcmV0dXJuIGluZGV4XzEuZGVmYXVsdCh7CiAgICAgIG1ldGhvZDogJ2RlbGV0ZScsCiAgICAgIHVybDogInYxL3Rlc3QvY2FzZS90cmVlLyIgKyBub2RlSWQKICAgIH0pOwogIH0sCiAgLy8g5a+85YWlWE1pbmTmlofku7YKICB1cGxvYWRYTWluZDogZnVuY3Rpb24gdXBsb2FkWE1pbmQoYm9keSkgewogICAgcmV0dXJuIGluZGV4XzEuZGVmYXVsdCh7CiAgICAgIG1ldGhvZDogJ3Bvc3QnLAogICAgICB1cmw6ICd2MS90ZXN0L21hbnVhbC9jYXNlL3VwbG9hZCcsCiAgICAgIGRhdGE6IGJvZHksCiAgICAgIGhlYWRlcnM6IHsKICAgICAgICAnQ29udGVudC1UeXBlJzogJ211bHRpcGFydC9mb3JtLWRhdGEnCiAgICAgIH0KICAgIH0pOwogIH0sCiAgLy8g57yW6L6R5Y2V5Liq55So5L6LCiAgdXBkYXRlVGVzdENhc2U6IGZ1bmN0aW9uIHVwZGF0ZVRlc3RDYXNlKGNhc2VJZCwgYm9keSkgewogICAgcmV0dXJuIGluZGV4XzEuZGVmYXVsdCh7CiAgICAgIG1ldGhvZDogJ3BhdGNoJywKICAgICAgdXJsOiAidjEvdGVzdC9tYW51YWwvY2FzZS8iICsgY2FzZUlkICsgIi91cGRhdGUiLAogICAgICBkYXRhOiBib2R5CiAgICB9KTsKICB9LAogIC8vIOaJuemHj+e8lui+keeUqOS+iwogIHVwZGF0ZVRlc3RDYXNlQmF0Y2g6IGZ1bmN0aW9uIHVwZGF0ZVRlc3RDYXNlQmF0Y2goYm9keSkgewogICAgcmV0dXJuIGluZGV4XzEuZGVmYXVsdCh7CiAgICAgIG1ldGhvZDogJ3BhdGNoJywKICAgICAgdXJsOiAndjEvdGVzdC9tYW51YWwvY2FzZS9iYXRjaCcsCiAgICAgIGRhdGE6IGJvZHkKICAgIH0pOwogIH0sCiAgLy8g6I635Y+W55So5L6L5YiX6KGoCiAgZ2V0VGVzdENhc2VMaXN0OiBmdW5jdGlvbiBnZXRUZXN0Q2FzZUxpc3QocGFyYW1zKSB7CiAgICByZXR1cm4gaW5kZXhfMS5kZWZhdWx0KHsKICAgICAgbWV0aG9kOiAnZ2V0JywKICAgICAgdXJsOiAndjEvdGVzdC9tYW51YWwvY2FzZS9saXN0JywKICAgICAgcGFyYW1zOiBwYXJhbXMsCiAgICAgIHBhcmFtc1NlcmlhbGl6ZXI6IGZ1bmN0aW9uIHBhcmFtc1NlcmlhbGl6ZXIocGFyYW1zKSB7CiAgICAgICAgcmV0dXJuIHFzXzEuZGVmYXVsdC5zdHJpbmdpZnkocGFyYW1zLCB7CiAgICAgICAgICBhcnJheUZvcm1hdDogJ3JlcGVhdCcKICAgICAgICB9KTsKICAgICAgfQogICAgfSk7CiAgfSwKICAvLyDmt7vliqDljZXkuKrnlKjkvosKICBjcmVhdGVUZXN0Q2FzZTogZnVuY3Rpb24gY3JlYXRlVGVzdENhc2UoYm9keSkgewogICAgcmV0dXJuIGluZGV4XzEuZGVmYXVsdCh7CiAgICAgIG1ldGhvZDogJ3Bvc3QnLAogICAgICB1cmw6ICd2MS90ZXN0L21hbnVhbC9jYXNlL2FkZCcsCiAgICAgIGRhdGE6IGJvZHkKICAgIH0pOwogIH0KfTs="},{"version":3,"sources":["/Users/jlglqa/Documents/QA/noa/node_modules/eslint-loader/index.js??ref--13-0!/Users/jlglqa/Documents/QA/noa/src/api/testCase.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,IAAA,OAAA,GAAA,eAAA,CAAA,OAAA,CAAA,aAAA,CAAA,CAAA,C,CAWA;;;AACA,IAAA,IAAA,GAAA,eAAA,CAAA,OAAA,CAAA,IAAA,CAAA,CAAA;;AAEA,OAAA,CAAA,OAAA,GAAe;AACb;AACA,EAAA,kBAAkB,EAAlB,4BAAmB,MAAnB,EAAiD;AAC/C,WAAO,OAAA,CAAA,OAAA,CAAS;AACd,MAAA,MAAM,EAAE,KADM;AAEd,MAAA,GAAG,EAAE,mBAFS;AAGd,MAAA,MAAM,EAAE;AAHM,KAAT,CAAP;AAKD,GARY;AASb;AACA,EAAA,qBAAqB,EAArB,+BAAsB,MAAtB,EAAsC,IAAtC,EAAwE;AACtE,WAAO,OAAA,CAAA,OAAA,CAAS;AACd,MAAA,MAAM,EAAE,OADM;AAEd,MAAA,GAAG,EAAE,uBAAqB,MAFZ;AAGd,MAAA,IAAI,EAAE;AAHQ,KAAT,CAAP;AAKD,GAhBY;AAiBb;AACA,EAAA,qBAAqB,EAArB,+BAAsB,IAAtB,EAAwD;AACtD,WAAO,OAAA,CAAA,OAAA,CAAS;AACd,MAAA,MAAM,EAAE,MADM;AAEd,MAAA,GAAG,EAAE,mBAFS;AAGd,MAAA,IAAI,EAAE;AAHQ,KAAT,CAAP;AAKD,GAxBY;AAyBb;AACA,EAAA,qBAAqB,EAArB,+BAAsB,MAAtB,EAAoC;AAClC,WAAO,OAAA,CAAA,OAAA,CAAS;AACd,MAAA,MAAM,EAAE,QADM;AAEd,MAAA,GAAG,EAAE,uBAAqB;AAFZ,KAAT,CAAP;AAID,GA/BY;AAgCb;AACA,EAAA,WAAW,EAAX,qBAAY,IAAZ,EAA+C;AAC7C,WAAO,OAAA,CAAA,OAAA,CAAS;AACd,MAAA,MAAM,EAAE,MADM;AAEd,MAAA,GAAG,EAAE,4BAFS;AAGd,MAAA,IAAI,EAAE,IAHQ;AAId,MAAA,OAAO,EAAE;AAAC,wBAAgB;AAAjB;AAJK,KAAT,CAAP;AAMD,GAxCY;AAyCb;AACA,EAAA,cAAc,EAAd,wBAAe,MAAf,EAA+B,IAA/B,EAA0D;AACxD,WAAO,OAAA,CAAA,OAAA,CAAS;AACd,MAAA,MAAM,EAAE,OADM;AAEd,MAAA,GAAG,EAAE,yBAAuB,MAAvB,GAA6B,SAFpB;AAGd,MAAA,IAAI,EAAE;AAHQ,KAAT,CAAP;AAKD,GAhDY;AAiDb;AACA,EAAA,mBAAmB,EAAnB,6BAAoB,IAApB,EAAoD;AAClD,WAAO,OAAA,CAAA,OAAA,CAAS;AACd,MAAA,MAAM,EAAE,OADM;AAEd,MAAA,GAAG,EAAE,2BAFS;AAGd,MAAA,IAAI,EAAE;AAHQ,KAAT,CAAP;AAKD,GAxDY;AAyDb;AACA,EAAA,eAAe,EAAf,yBAAgB,MAAhB,EAA8C;AAC5C,WAAO,OAAA,CAAA,OAAA,CAAS;AACd,MAAA,MAAM,EAAE,KADM;AAEd,MAAA,GAAG,EAAE,0BAFS;AAGd,MAAA,MAAM,EAAE,MAHM;AAId,MAAA,gBAAgB,EAAhB,0BAAiB,MAAjB,EAA4B;AAC1B,eAAO,IAAA,CAAA,OAAA,CAAG,SAAH,CAAa,MAAb,EAAqB;AAAC,UAAA,WAAW,EAAE;AAAd,SAArB,CAAP;AACD;AANa,KAAT,CAAP;AAQD,GAnEY;AAoEb;AACA,EAAA,cAAc,EAAd,wBAAe,IAAf,EAA0C;AACxC,WAAO,OAAA,CAAA,OAAA,CAAS;AACd,MAAA,MAAM,EAAE,MADM;AAEd,MAAA,GAAG,EAAE,yBAFS;AAGd,MAAA,IAAI,EAAE;AAHQ,KAAT,CAAP;AAKD;AA3EY,CAAf","sourcesContent":["import instance from \"@/api/index\"\nimport {\n  RequestCreateTestCase,\n  RequestCreateTestCaseModules,\n  RequestGetTestCaseList,\n  RequestTestCaseModules,\n  RequestUpdateTestCase,\n  RequestUpdateTestCaseBatch,\n  RequestUpdateTestCaseModules,\n  RequestUploadXMind\n} from \"@/api/types/testTrack\"\n// @ts-ignore\nimport Qs from \"qs\"\n\nexport default {\n  // 获取用例树\n  getTestCaseModules(params: RequestTestCaseModules) {\n    return instance({\n      method: 'get',\n      url: 'v1/test/case/tree',\n      params: params\n    })\n  },\n  // 编辑用例树\n  updateTestCaseModules(nodeId: string, body: RequestUpdateTestCaseModules) {\n    return instance({\n      method: 'patch',\n      url: `v1/test/case/tree/${nodeId}`,\n      data: body\n    })\n  },\n  // 新增用例树\n  createTestCaseModules(body: RequestCreateTestCaseModules) {\n    return instance({\n      method: 'post',\n      url: 'v1/test/case/tree',\n      data: body\n    })\n  },\n  // 删除用例树\n  deleteTestCaseModules(nodeId: string) {\n    return instance({\n      method: 'delete',\n      url: `v1/test/case/tree/${nodeId}`,\n    })\n  },\n  // 导入XMind文件\n  uploadXMind(body: RequestUploadXMind | FormData) {\n    return instance({\n      method: 'post',\n      url: 'v1/test/manual/case/upload',\n      data: body,\n      headers: {'Content-Type': 'multipart/form-data'}\n    })\n  },\n  // 编辑单个用例\n  updateTestCase(caseId: string, body: RequestUpdateTestCase) {\n    return instance({\n      method: 'patch',\n      url: `v1/test/manual/case/${caseId}/update`,\n      data: body,\n    })\n  },\n  // 批量编辑用例\n  updateTestCaseBatch(body: RequestUpdateTestCaseBatch) {\n    return instance({\n      method: 'patch',\n      url: 'v1/test/manual/case/batch',\n      data: body\n    })\n  },\n  // 获取用例列表\n  getTestCaseList(params: RequestGetTestCaseList) {\n    return instance({\n      method: 'get',\n      url: 'v1/test/manual/case/list',\n      params: params,\n      paramsSerializer(params: any) {\n        return Qs.stringify(params, {arrayFormat: 'repeat'})\n      }\n    })\n  },\n  // 添加单个用例\n  createTestCase(body: RequestCreateTestCase) {\n    return instance({\n      method: 'post',\n      url: 'v1/test/manual/case/add',\n      data: body\n    })\n  },\n}\n"],"sourceRoot":""}]}