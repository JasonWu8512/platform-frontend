{"remainingRequest":"/Users/jlglqa/Documents/QA/noa/node_modules/babel-loader/lib/index.js!/Users/jlglqa/Documents/QA/noa/node_modules/ts-loader/index.js??ref--14-2!/Users/jlglqa/Documents/QA/noa/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/jlglqa/Documents/QA/noa/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jlglqa/Documents/QA/noa/src/pages/track/review/view/components/TestReviewTestCaseList.vue?vue&type=script&lang=ts&","dependencies":[{"path":"/Users/jlglqa/Documents/QA/noa/src/pages/track/review/view/components/TestReviewTestCaseList.vue","mtime":1655949681808},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/cache-loader/dist/cjs.js","mtime":1644298102062},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/babel-loader/lib/index.js","mtime":1644314985388},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/ts-loader/index.js","mtime":1644314987889},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/cache-loader/dist/cjs.js","mtime":1644298102062},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/vue-loader/lib/index.js","mtime":1644314988580},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/cache-loader/dist/cjs.js","mtime":1644298102062},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/babel-loader/lib/index.js","mtime":1644314985388},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/ts-loader/index.js","mtime":1644314987889},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/cache-loader/dist/cjs.js","mtime":1644298102062},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/vue-loader/lib/index.js","mtime":1644314988580}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/jlglqa/Documents/QA/noa/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/jlglqa/Documents/QA/noa/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jlglqa/Documents/QA/noa/src/pages/track/review/view/components/TestReviewTestCaseList.vue?vue&type=script&lang=ts&"],"names":[],"mappings":"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","sourcesContent":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimport {testCaseApi} from \"@/api\"\nimport {RequestGetTestCaseList, RequestUpdateTestCaseBatch} from \"@/api/types/testTrack\"\nimport {typeCaseData} from \"@/api/types/testTrackType\"\nimport variables from \"@/assets/css/utils.scss\"\nimport TablePagination from \"@/common/components/pagination/TablePagination.vue\"\nimport TableHeader from \"@/common/components/TableHeader.vue\"\nimport TableOperator from \"@/common/components/TableOperator.vue\"\nimport {_filter, formatTime} from \"@/common/utils\"\nimport {PAGINATION_SIZE} from \"@/constant\"\nimport {caseTypeType, caseUpdateTypeEnum, executionType, priorityType} from \"@/constant/TestCase\"\nimport {caseBatchReviewType, reviewCaseStatusType} from \"@/constant/TestReivew\"\nimport BatchEdit from \"@/pages/track/case/components/BatchEdit.vue\"\nimport ShowMoreBtn from \"@/pages/track/case/components/ShowMoreBtn.vue\"\nimport CaseTypeTableItem from \"@/pages/track/common/tableItems/CaseTypeTableItem.vue\"\nimport ExecutionTypeTableItem from \"@/pages/track/common/tableItems/ExecutionTypeTableItem.vue\"\nimport PriorityTableItem from \"@/pages/track/common/tableItems/PriorityTableItem.vue\"\nimport ReviewCaseStatusTableItem from \"@/pages/track/common/tableItems/ReviewCaseStatusTableItem.vue\"\nimport {getModuleByTreeId, getModuleOptions} from \"@/pages/track/common/utils\"\n\n// 执行方式\nconst executionOptions = Object.entries(executionType).map(([value, text]) => {\n  return {text: text, value: value}\n})\n// 用例优先级\nconst priorityOptions = Object.entries(priorityType).map(([value, text]) => {\n  return {text: text, value: value}\n})\n// 评审状态\nconst statusOptions = Object.entries(reviewCaseStatusType).map(([value, text]) => {\n  return {text: text, value: value}\n})\n// 用例类型\nconst caseTypeOptions = Object.entries(caseTypeType).map(([value, text]) => {\n  return {text: text, value: value}\n})\n// 批量编辑类型\nconst caseBatchReviewOptions = Object.entries(caseBatchReviewType).map(([value, text]) => {\n  return {text: text, value: value}\n})\n\nexport default {\n  name: \"TestReviewTestCaseList\",\n  components: {\n    ExecutionTypeTableItem,\n    CaseTypeTableItem,\n    ReviewCaseStatusTableItem,\n    TableOperator,\n    PriorityTableItem,\n    TablePagination,\n    TableHeader,\n    BatchEdit,\n    ShowMoreBtn,\n  },\n  data() {\n    return {\n      executionOptions: executionOptions,\n      priorityOptions: priorityOptions,\n      statusOptions: statusOptions,\n      caseTypeOptions: caseTypeOptions,\n      caseBatchReviewOptions: caseBatchReviewOptions,\n      tableData: [],\n      treeNodes: [],\n      currentPage: 1,\n      pageSize: PAGINATION_SIZE.LARGE,\n      total: 0,\n      selectRows: new Set(),\n      isDisabled: true,\n      caseFilter: {},\n      buttons: [{name: '批量评审用例', handleClick: this.handleBatchReview}],\n      condition: {\n        // 所属模块\n        moduleOptions: [],\n        // 维护人\n        maintainerOptions: [],\n        // 执行方式\n        executionOptions: executionOptions,\n        // 优先级\n        priorityOptions: priorityOptions,\n        // 用例类型\n        caseTypeOptions: caseTypeOptions,\n      },\n      batchReviewValueArr: {\n        // 评审状态\n        status: statusOptions,\n      },\n    }\n  },\n  props: {\n    currentReview: Object,\n    projects: Array,\n  },\n  computed: {\n    loading() {\n      return this.$store.state.loading\n    },\n    users() {\n      return this.$store.state.users.users\n    },\n    table1BtnWidth() {\n      return variables['table1BtnWidth']\n    },\n    tableTimeWidth() {\n      return variables['tableTimeWidth']\n    },\n    caseIds() {\n      return Array.from(this.selectRows).map((row: { id: string }) => row.id)\n    },\n  },\n  watch: {\n    currentReview() {\n      this.initTableData()\n    }\n  },\n  methods: {\n    async setSelectOptions() {\n      await this.setModuleOptions()\n      // this.setMaintainerOptions()\n    },\n    async initTableData() {\n      await this.setSelectOptions()\n      await this.getData()\n    },\n    async getData(value?: string) {\n      const params: RequestGetTestCaseList = {\n        treeId: this.currentReview.treeId,\n        offset: this.pageSize * (this.currentPage - 1),\n        limit: this.pageSize,\n        name: value,\n      }\n\n      this.caseFilter = sessionStorage.getItem(this.$route.path)\n      this.caseFilter = this.caseFilter ? JSON.parse(this.caseFilter) : {}\n      if (JSON.stringify(this.caseFilter) !== \"{}\") {\n        Object.assign(params, this.caseFilter)\n        this.$refs.table.columns.forEach((item: any) => {\n          item.filteredValue = this.caseFilter[item.columnKey]\n        })\n      }\n\n      await testCaseApi.getTestCaseList(params)\n        .then(({data}) => {\n          this.total = data.total\n          this.tableData = data.data\n          this.tableData.forEach((item: any) => {\n            item.updatedAt = formatTime(item.updatedAt)\n            item.treePath = getModuleByTreeId(this.treeNodes, item.treeId).path\n            item.projName = this.projects.find((obj: any) => obj.id === item.projId).name\n          })\n        })\n    },\n    handleSearch(value?: string) {\n      this.getData(value)\n    },\n    handleReviewRun(testCase?: typeCaseData) {\n      // 开始评审按钮，默认选择第一个\n      if (!testCase) testCase = this.tableData[0]\n      this.$eventBus.$emit(\"testReviewCaseRun\", testCase, this.tableData, this)\n    },\n    handleSelectAll(selection: Object[]) {\n      if (selection.length > 0) {\n        this.tableData.forEach((item: any) => {\n          this.$set(item, \"isDisabled\", false)\n        })\n        this.selectRows = new Set(selection)\n      } else {\n        this.selectRows.clear()\n        this.tableData.forEach((row: any) => {\n          this.$set(row, \"isDisabled\", true)\n        })\n      }\n    },\n    handleSelectionChange(selection: Object[], row: any) {\n      if (selection.indexOf(row) === -1) {\n        this.$set(row, \"isDisabled\", true)\n      } else {\n        this.$set(row, \"isDisabled\", false)\n      }\n      this.selectRows = new Set(selection)\n    },\n    batchReview(reviewForm: any) {\n      const body: RequestUpdateTestCaseBatch = {\n        caseIds: this.caseIds,\n        type: caseUpdateTypeEnum.UPDATE_REVIEW_STATUS,\n        status: reviewForm.value,\n        reviewId: this.currentReview.id,\n      }\n      testCaseApi.updateTestCaseBatch(body)\n        .then(() => {\n          this.refresh()\n        })\n    },\n    handleBatchReview() {\n      this.$refs.batchEdit.open()\n    },\n    refresh() {\n      this.$emit('refresh')\n    },\n    filter(filters: any) {\n      this.currentPage = 1\n      _filter(filters, this.caseFilter, this.$route.path)\n      this.initTableData()\n    },\n    setMaintainerOptions() {\n      this.condition.maintainerOptions = this.users\n    },\n    async setModuleOptions() {\n      await testCaseApi.getTestCaseModules({projId: this.currentReview.projId})\n        .then(({data}) => {\n          this.treeNodes = data\n          this.condition.moduleOptions = getModuleOptions(this.treeNodes)\n        })\n    },\n  }\n}\n"],"sourceRoot":""}]}