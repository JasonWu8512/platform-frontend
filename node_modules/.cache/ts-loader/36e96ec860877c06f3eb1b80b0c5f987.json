{"remainingRequest":"/Users/jlglqa/Documents/QA/noa/node_modules/babel-loader/lib/index.js!/Users/jlglqa/Documents/QA/noa/node_modules/ts-loader/index.js??ref--14-2!/Users/jlglqa/Documents/QA/noa/node_modules/eslint-loader/index.js??ref--13-0!/Users/jlglqa/Documents/QA/noa/src/api/testPlan.ts","dependencies":[{"path":"/Users/jlglqa/Documents/QA/noa/src/api/testPlan.ts","mtime":1655949681743},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/cache-loader/dist/cjs.js","mtime":1644298102062},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/babel-loader/lib/index.js","mtime":1644314985388},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/ts-loader/index.js","mtime":1644314987889},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/eslint-loader/index.js","mtime":1644298104993}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:InVzZSBzdHJpY3QiOwoKdmFyIF9faW1wb3J0RGVmYXVsdCA9IHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQgfHwgZnVuY3Rpb24gKG1vZCkgewogIHJldHVybiBtb2QgJiYgbW9kLl9fZXNNb2R1bGUgPyBtb2QgOiB7CiAgICAiZGVmYXVsdCI6IG1vZAogIH07Cn07CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7Cgp2YXIgaW5kZXhfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKCJAL2FwaS9pbmRleCIpKTsKCnZhciBxc18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoInFzIikpOwoKZXhwb3J0cy5kZWZhdWx0ID0gewogIC8vIOaWsOWinua1i+ivleiuoeWIkgogIGNyZWF0ZVRlc3RDYXNlUGxhbjogZnVuY3Rpb24gY3JlYXRlVGVzdENhc2VQbGFuKGJvZHkpIHsKICAgIHJldHVybiBpbmRleF8xLmRlZmF1bHQoewogICAgICBtZXRob2Q6ICdwb3N0JywKICAgICAgdXJsOiAndjEvdGVzdC9wbGFuJywKICAgICAgZGF0YTogYm9keQogICAgfSk7CiAgfSwKICAvLyDkv67mlLnmtYvor5XorqHliJIKICB1cGRhdGVUZXN0Q2FzZVBsYW46IGZ1bmN0aW9uIHVwZGF0ZVRlc3RDYXNlUGxhbihwbGFuSWQsIGJvZHkpIHsKICAgIHJldHVybiBpbmRleF8xLmRlZmF1bHQoewogICAgICBtZXRob2Q6ICdwYXRjaCcsCiAgICAgIHVybDogInYxL3Rlc3QvcGxhbi8iLmNvbmNhdChwbGFuSWQpLAogICAgICBkYXRhOiBib2R5CiAgICB9KTsKICB9LAogIC8vIOWIoOmZpOa1i+ivleiuoeWIkgogIGRlbGV0ZVRlc3RDYXNlUGxhbjogZnVuY3Rpb24gZGVsZXRlVGVzdENhc2VQbGFuKHBsYW5JZCkgewogICAgcmV0dXJuIGluZGV4XzEuZGVmYXVsdCh7CiAgICAgIG1ldGhvZDogJ2RlbGV0ZScsCiAgICAgIHVybDogInYxL3Rlc3QvcGxhbi8iLmNvbmNhdChwbGFuSWQpCiAgICB9KTsKICB9LAogIC8vIOiOt+WPlua1i+ivleiuoeWIkuWIl+ihqAogIGdldFRlc3RDYXNlUGxhbkxpc3Q6IGZ1bmN0aW9uIGdldFRlc3RDYXNlUGxhbkxpc3QocGFyYW1zKSB7CiAgICByZXR1cm4gaW5kZXhfMS5kZWZhdWx0KHsKICAgICAgbWV0aG9kOiAnZ2V0JywKICAgICAgdXJsOiAndjEvdGVzdC9wbGFuJywKICAgICAgcGFyYW1zOiBwYXJhbXMsCiAgICAgIHBhcmFtc1NlcmlhbGl6ZXI6IGZ1bmN0aW9uIHBhcmFtc1NlcmlhbGl6ZXIocGFyYW1zKSB7CiAgICAgICAgcmV0dXJuIHFzXzEuZGVmYXVsdC5zdHJpbmdpZnkocGFyYW1zLCB7CiAgICAgICAgICBhcnJheUZvcm1hdDogJ3JlcGVhdCcKICAgICAgICB9KTsKICAgICAgfQogICAgfSk7CiAgfSwKICAvLyDojrflj5bljZXkuKrorqHliJLor6bmg4UKICBnZXRUZXN0Q2FzZVBsYW5EZXRhaWw6IGZ1bmN0aW9uIGdldFRlc3RDYXNlUGxhbkRldGFpbChwbGFuSWQpIHsKICAgIHJldHVybiBpbmRleF8xLmRlZmF1bHQoewogICAgICBtZXRob2Q6ICdnZXQnLAogICAgICB1cmw6ICJ2MS90ZXN0L3BsYW4vIi5jb25jYXQocGxhbklkKQogICAgfSk7CiAgfSwKICAvLyDojrflj5borqHliJLlhbPogZTnmoTmiqXlkYoKICBnZXRUZXN0Q2FzZVBsYW5SZXBvcnQ6IGZ1bmN0aW9uIGdldFRlc3RDYXNlUGxhblJlcG9ydChwbGFuSWQpIHsKICAgIHJldHVybiBpbmRleF8xLmRlZmF1bHQoewogICAgICBtZXRob2Q6ICdnZXQnLAogICAgICB1cmw6ICJ2MS90ZXN0L3BsYW4vIi5jb25jYXQocGxhbklkLCAiL3JlcG9ydCIpCiAgICB9KTsKICB9LAogIC8vIOWFs+iBlC/lj5bmtojlhbPogZTorqHliJLlkozmtYvor5XnlKjkvosKICB1cGRhdGVUZXN0Q2FzZVBsYW5DYXNlTGlzdDogZnVuY3Rpb24gdXBkYXRlVGVzdENhc2VQbGFuQ2FzZUxpc3QocGxhbklkLCBib2R5KSB7CiAgICByZXR1cm4gaW5kZXhfMS5kZWZhdWx0KHsKICAgICAgbWV0aG9kOiAncG9zdCcsCiAgICAgIHVybDogInYxL3Rlc3QvcGxhbi8iLmNvbmNhdChwbGFuSWQsICIvY2FzZS9yZWxhdGUiKSwKICAgICAgZGF0YTogYm9keQogICAgfSk7CiAgfSwKICAvLyDojrflj5borqHliJLlhbPogZTnmoTnlKjkvosKICBnZXRUZXN0Q2FzZVBsYW5DYXNlTGlzdDogZnVuY3Rpb24gZ2V0VGVzdENhc2VQbGFuQ2FzZUxpc3QocGxhbklkLCBwYXJhbXMpIHsKICAgIHJldHVybiBpbmRleF8xLmRlZmF1bHQoewogICAgICBtZXRob2Q6ICdnZXQnLAogICAgICB1cmw6ICJ2MS90ZXN0L3BsYW4vIi5jb25jYXQocGxhbklkLCAiL2Nhc2UiKSwKICAgICAgcGFyYW1zOiBwYXJhbXMsCiAgICAgIHBhcmFtc1NlcmlhbGl6ZXI6IGZ1bmN0aW9uIHBhcmFtc1NlcmlhbGl6ZXIocGFyYW1zKSB7CiAgICAgICAgcmV0dXJuIHFzXzEuZGVmYXVsdC5zdHJpbmdpZnkocGFyYW1zLCB7CiAgICAgICAgICBhcnJheUZvcm1hdDogJ3JlcGVhdCcKICAgICAgICB9KTsKICAgICAgfQogICAgfSk7CiAgfSwKICAvLyDojrflj5borqHliJLlnKjmn5Dpobnnm64v5qih5Z2X5LiL5pyq5YWz6IGU55qE55So5L6L77yM5Li76KaB5piv5YWz6IGU55So5L6L5by556qX6aG16Z2i55So5YiwCiAgZ2V0VGVzdENhc2VQbGFuVW5SZWxhdGVDYXNlTGlzdDogZnVuY3Rpb24gZ2V0VGVzdENhc2VQbGFuVW5SZWxhdGVDYXNlTGlzdChwbGFuSWQsIHBhcmFtcykgewogICAgcmV0dXJuIGluZGV4XzEuZGVmYXVsdCh7CiAgICAgIG1ldGhvZDogJ2dldCcsCiAgICAgIHVybDogIi92MS90ZXN0L3BsYW4vIi5jb25jYXQocGxhbklkLCAiL2Nhc2Uvbm9fcmVsYXRlIiksCiAgICAgIHBhcmFtczogcGFyYW1zLAogICAgICBwYXJhbXNTZXJpYWxpemVyOiBmdW5jdGlvbiBwYXJhbXNTZXJpYWxpemVyKHBhcmFtcykgewogICAgICAgIHJldHVybiBxc18xLmRlZmF1bHQuc3RyaW5naWZ5KHBhcmFtcywgewogICAgICAgICAgYXJyYXlGb3JtYXQ6ICdyZXBlYXQnCiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0pOwogIH0sCiAgLy8g6I635Y+W6K6h5YiS5YWz6IGU55qE55So5L6L5qCRCiAgZ2V0VGVzdENhc2VQbGFuQ2FzZVRyZWU6IGZ1bmN0aW9uIGdldFRlc3RDYXNlUGxhbkNhc2VUcmVlKHBsYW5JZCkgewogICAgcmV0dXJuIGluZGV4XzEuZGVmYXVsdCh7CiAgICAgIG1ldGhvZDogJ2dldCcsCiAgICAgIHVybDogInYxL3Rlc3QvcGxhbi8iLmNvbmNhdChwbGFuSWQsICIvdHJlZSIpCiAgICB9KTsKICB9LAogIC8v6I635Y+W6K6h5YiS5YWz6IGU55qE5YaS54Of6K6h5YiS6YCa6L+H546HCiAgZ2V0VGVzdFBsYW5TbW9rZVBhc3NSYXRlOiBmdW5jdGlvbiBnZXRUZXN0UGxhblNtb2tlUGFzc1JhdGUocGxhbklkKSB7CiAgICByZXR1cm4gaW5kZXhfMS5kZWZhdWx0KHsKICAgICAgbWV0aG9kOiAnZ2V0JywKICAgICAgdXJsOiAidjEvdGVzdC9wbGFuLyIuY29uY2F0KHBsYW5JZCwgIi9zbW9rZS9wYXNzX3JhdGUiKQogICAgfSk7CiAgfSwKICAvLyDojrflj5blvIDlj5Hmj5DmtYvlrqHmibnmtYHor6bmg4UKICBnZXRQYWNrYWdpbmdUZXN0QXBwcm92YWw6IGZ1bmN0aW9uIGdldFBhY2thZ2luZ1Rlc3RBcHByb3ZhbChwbGFuSWQsIHBhcmFtcykgewogICAgcmV0dXJuIGluZGV4XzEuZGVmYXVsdCh7CiAgICAgIG1ldGhvZDogJ2dldCcsCiAgICAgIHVybDogInYxL3Rlc3QvcGxhbi8iLmNvbmNhdChwbGFuSWQsICIvc21va2UvcGFja2FnaW5nX3Rlc3QiKSwKICAgICAgcGFyYW1zOiBwYXJhbXMKICAgIH0pOwogIH0sCiAgLy8g5byA5Y+R5o+Q5rWLCiAgY3JlYXRlUGFja2FnaW5nVGVzdEFwcHJvdmFsOiBmdW5jdGlvbiBjcmVhdGVQYWNrYWdpbmdUZXN0QXBwcm92YWwocGxhbklkLCBib2R5KSB7CiAgICByZXR1cm4gaW5kZXhfMS5kZWZhdWx0KHsKICAgICAgbWV0aG9kOiAncG9zdCcsCiAgICAgIHVybDogInYxL3Rlc3QvcGxhbi8iLmNvbmNhdChwbGFuSWQsICIvc21va2UvcGFja2FnaW5nX3Rlc3QiKSwKICAgICAgZGF0YTogYm9keQogICAgfSk7CiAgfSwKICAvLyDlj5jmm7TlrqHmibnmtYHnirbmgIEKICB1cGRhdGVBcHByb3ZhbFN0YXR1czogZnVuY3Rpb24gdXBkYXRlQXBwcm92YWxTdGF0dXMocGxhbklkLCBib2R5KSB7CiAgICByZXR1cm4gaW5kZXhfMS5kZWZhdWx0KHsKICAgICAgbWV0aG9kOiAncG9zdCcsCiAgICAgIHVybDogInYxL3Rlc3QvcGxhbi8iLmNvbmNhdChwbGFuSWQsICIvc21va2UvcGFja2FnaW5nX3Rlc3QvYXBwcm92YWxfc3RhdHVzIiksCiAgICAgIGRhdGE6IGJvZHkKICAgIH0pOwogIH0sCiAgLy8g5Y+R6YCB5oql5ZGKCiAgc2VuZFJlcG9ydEVtYWlsOiBmdW5jdGlvbiBzZW5kUmVwb3J0RW1haWwocGxhbklkLCBib2R5KSB7CiAgICByZXR1cm4gaW5kZXhfMS5kZWZhdWx0KHsKICAgICAgbWV0aG9kOiAncG9zdCcsCiAgICAgIHVybDogInYxL3Rlc3QvcGxhbi8iLmNvbmNhdChwbGFuSWQsICIvc2VuZF9yZXBvcnQiKSwKICAgICAgZGF0YTogYm9keQogICAgfSk7CiAgfSwKICAvLyBzb25hciDnu5PmnpwKICBnZXRTb25hclJlc3VsdDogZnVuY3Rpb24gZ2V0U29uYXJSZXN1bHQocGFyYW1zKSB7CiAgICByZXR1cm4gaW5kZXhfMS5kZWZhdWx0KHsKICAgICAgbWV0aG9kOiAnZ2V0JywKICAgICAgdXJsOiAndjEvc29uYXInLAogICAgICBwYXJhbXM6IHBhcmFtcywKICAgICAgcGFyYW1zU2VyaWFsaXplcjogZnVuY3Rpb24gcGFyYW1zU2VyaWFsaXplcihwYXJhbXMpIHsKICAgICAgICByZXR1cm4gcXNfMS5kZWZhdWx0LnN0cmluZ2lmeShwYXJhbXMsIHsKICAgICAgICAgIGFycmF5Rm9ybWF0OiAncmVwZWF0JwogICAgICAgIH0pOwogICAgICB9CiAgICB9KTsKICB9Cn07"},{"version":3,"sources":["/Users/jlglqa/Documents/QA/noa/node_modules/eslint-loader/index.js??ref--13-0!/Users/jlglqa/Documents/QA/noa/src/api/testPlan.ts"],"names":[],"mappings":"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","sourcesContent":["import instance from \"@/api/index\"\nimport {\n  RequestCreatePackagingTestApproval,\n  RequestCreateTestCasePlan,\n  RequestGetPackagingTestApproval,\n  RequestGetTestCasePlanCaseList,\n  RequestGetTestCasePlanList,\n  RequestGetTestCasePlanUnRelateCaseList,\n  RequestUpdateApprovalStatus,\n  RequestUpdateTestCasePlan,\n  RequestUpdateTestCasePlanCaseList\n} from \"@/api/types/testPlan\"\nimport Qs from \"qs\"\n\nexport default {\n  // 新增测试计划\n  createTestCasePlan(body: RequestCreateTestCasePlan) {\n    return instance({\n      method: 'post',\n      url: 'v1/test/plan',\n      data: body,\n    })\n  },\n  // 修改测试计划\n  updateTestCasePlan(planId: string, body: RequestUpdateTestCasePlan) {\n    return instance({\n      method: 'patch',\n      url: `v1/test/plan/${planId}`,\n      data: body,\n    })\n  },\n  // 删除测试计划\n  deleteTestCasePlan(planId: string) {\n    return instance({\n      method: 'delete',\n      url: `v1/test/plan/${planId}`,\n    })\n  },\n  // 获取测试计划列表\n  getTestCasePlanList(params: RequestGetTestCasePlanList) {\n    return instance({\n      method: 'get',\n      url: 'v1/test/plan',\n      params: params,\n      paramsSerializer(params) {\n        return Qs.stringify(params, {arrayFormat: 'repeat'})\n      }\n    })\n  },\n  // 获取单个计划详情\n  getTestCasePlanDetail(planId: string) {\n    return instance({\n      method: 'get',\n      url: `v1/test/plan/${planId}`,\n    })\n  },\n  // 获取计划关联的报告\n  getTestCasePlanReport(planId: string) {\n    return instance({\n      method: 'get',\n      url: `v1/test/plan/${planId}/report`,\n    })\n  },\n  // 关联/取消关联计划和测试用例\n  updateTestCasePlanCaseList(planId: string, body: RequestUpdateTestCasePlanCaseList) {\n    return instance({\n      method: 'post',\n      url: `v1/test/plan/${planId}/case/relate`,\n      data: body,\n    })\n  },\n  // 获取计划关联的用例\n  getTestCasePlanCaseList(planId: string, params: RequestGetTestCasePlanCaseList) {\n    return instance({\n      method: 'get',\n      url: `v1/test/plan/${planId}/case`,\n      params: params,\n      paramsSerializer(params) {\n        return Qs.stringify(params, {arrayFormat: 'repeat'})\n      }\n    })\n  },\n  // 获取计划在某项目/模块下未关联的用例，主要是关联用例弹窗页面用到\n  getTestCasePlanUnRelateCaseList(planId: string, params: RequestGetTestCasePlanUnRelateCaseList) {\n    return instance({\n      method: 'get',\n      url: `/v1/test/plan/${planId}/case/no_relate`,\n      params: params,\n      paramsSerializer(params) {\n        return Qs.stringify(params, {arrayFormat: 'repeat'})\n      }\n    })\n  },\n  // 获取计划关联的用例树\n  getTestCasePlanCaseTree(planId: string) {\n    return instance({\n      method: 'get',\n      url: `v1/test/plan/${planId}/tree`,\n    })\n  },\n  //获取计划关联的冒烟计划通过率\n  getTestPlanSmokePassRate(planId: string) {\n    return instance({\n      method: 'get',\n      url: `v1/test/plan/${planId}/smoke/pass_rate`,\n    })\n  },\n  // 获取开发提测审批流详情\n  getPackagingTestApproval(planId: string, params: RequestGetPackagingTestApproval) {\n    return instance({\n      method: 'get',\n      url: `v1/test/plan/${planId}/smoke/packaging_test`,\n      params: params,\n    })\n  },\n  // 开发提测\n  createPackagingTestApproval(planId: string, body: RequestCreatePackagingTestApproval) {\n    return instance({\n      method: 'post',\n      url: `v1/test/plan/${planId}/smoke/packaging_test`,\n      data: body,\n    })\n  },\n  // 变更审批流状态\n  updateApprovalStatus(planId: string, body: RequestUpdateApprovalStatus) {\n    return instance({\n      method: 'post',\n      url: `v1/test/plan/${planId}/smoke/packaging_test/approval_status`,\n      data: body,\n    })\n  },\n  // 发送报告\n  sendReportEmail(planId: string, body: any) {\n    return instance({\n      method: 'post',\n      url: `v1/test/plan/${planId}/send_report`,\n      data: body\n    })\n  },\n  // sonar 结果\n  getSonarResult(params: any){\n    return instance({\n      method: 'get',\n      url: 'v1/sonar',\n      params: params,\n      paramsSerializer(params) {\n        return Qs.stringify(params, {arrayFormat: 'repeat'})\n      }\n    })\n  }\n }\n"],"sourceRoot":""}]}