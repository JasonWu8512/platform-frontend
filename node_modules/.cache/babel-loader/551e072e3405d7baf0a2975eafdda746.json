{"remainingRequest":"/Users/jlglqa/Documents/QA/noa/node_modules/babel-loader/lib/index.js!/Users/jlglqa/Documents/QA/noa/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/jlglqa/Documents/QA/noa/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jlglqa/Documents/QA/noa/src/pages/jira/MonthTrendReport.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jlglqa/Documents/QA/noa/src/pages/jira/MonthTrendReport.vue","mtime":1655949681777},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/cache-loader/dist/cjs.js","mtime":1644298102062},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/babel-loader/lib/index.js","mtime":1644314985388},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/cache-loader/dist/cjs.js","mtime":1644298102062},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/vue-loader/lib/index.js","mtime":1644314988580}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmNvbmNhdC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5rZXlzLmpzIjsKLy8KLy8KLy8KLy8KLy8KLy8KaW1wb3J0IGppcmFBcGkgZnJvbSAnQC9hcGkvamlyYSc7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAiTW9udGhUcmVuZFJlcG9ydCIsCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHRoaXMuY2hhcnRTZXR0aW5ncyA9IHsKICAgICAgLy8gc3RhY2s6IHsgJ+eUqOaItyc6IFsn6K6/6Zeu55So5oi3JywgJ+S4i+WNleeUqOaItyddIH0sCiAgICAgIGFyZWE6IHRydWUKICAgIH07CiAgICByZXR1cm4gewogICAgICBsb2FkaW5nOiBmYWxzZSwKICAgICAgZXh0ZW5kOiB7CiAgICAgICAgdG9vbHRpcDogewogICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiBmb3JtYXR0ZXIocGFyYW1zKSB7CiAgICAgICAgICAgIC8vIOaPkOekuuWGheWuueWkquWkmumalOihjOaYvuekuuWGheWuuQogICAgICAgICAgICB2YXIgYXN0ciA9ICcnOwogICAgICAgICAgICBwYXJhbXMuZm9yRWFjaChmdW5jdGlvbiAoZWxlLCBpbmRleCkgewogICAgICAgICAgICAgIGFzdHIgKz0gIlxuICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT1cImRpc3BsYXk6IGJsb2NrO2hlaWdodDoyMHB4OyIuY29uY2F0KGluZGV4ICUgMiA9PT0gMCA/ICd3aWR0aDogNTAlOycgOiAnd2lkdGg6IDM4JTsnLCAiZmxvYXQ6bGVmdDtcIj5cbiAgICAgICAgICAgICAgICAgICAgICA8aSBzdHlsZT1cIndpZHRoOiAxMHB4O2hlaWdodDogMTBweDtkaXNwbGF5OiBpbmxpbmUtYmxvY2s7YmFja2dyb3VuZDogIikuY29uY2F0KGVsZS5jb2xvciwgIjtib3JkZXItcmFkaXVzOiAxMHB4O1wiPjwvaT5cbiAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj4iKS5jb25jYXQoZWxlLnNlcmllc05hbWUsICI6ICIpLmNvbmNhdChlbGUuZGF0YSwgIjwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAiKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHZhciBiID0gJzxkaXYgc3R5bGU9IndpZHRoOiA1MDBweDsiPicgKyBhc3RyICsgJzxkaXY+JzsKICAgICAgICAgICAgcmV0dXJuIGI7CiAgICAgICAgICB9LAogICAgICAgICAgcG9zaXRpb246IGZ1bmN0aW9uIHBvc2l0aW9uKHBvaW50KSB7CiAgICAgICAgICAgIHJldHVybiBbcG9pbnRbMV0sIDBdOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwKICAgICAgb3B0aW9uczogewogICAgICAgIHRpdGxlOiB7CiAgICAgICAgICB0ZXh0OiAnYnVn546H5pyI5bqm6LaL5Yq/JwogICAgICAgIH0KICAgICAgfSwKICAgICAgY2hhcnREYXRhOiB7CiAgICAgICAgY29sdW1uczogW10sCiAgICAgICAgcm93czogW10KICAgICAgfSAvLyBjaGFydFNldHRpbmdzOiB7CiAgICAgIC8vICAgLy8gc3RhY2s6IHsgJ+eUqOaItyc6IFsn6K6/6Zeu55So5oi3JywgJ+S4i+WNleeUqOaItyddIH0sCiAgICAgIC8vICAgYXJlYTogdHJ1ZQogICAgICAvLyB9CgogICAgfTsKICB9LAogIHByb3BzOiB7CiAgICBtb250aDogewogICAgICB0eXBlOiBTdHJpbmcKICAgIH0KICB9LAogIHdhdGNoOiB7CiAgICBtb250aDogZnVuY3Rpb24gbW9udGgoKSB7CiAgICAgIHRoaXMuZ2V0TW9udGhUcmVuZCgpOwogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgZ2V0TW9udGhUcmVuZDogZnVuY3Rpb24gZ2V0TW9udGhUcmVuZCgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHRoaXMuY2hhcnREYXRhLmNvbHVtbnMgPSBbXTsKICAgICAgdGhpcy5jaGFydERhdGEucm93cyA9IFtdOwogICAgICB0aGlzLmxvYWRpbmcgPSB0cnVlOwogICAgICBqaXJhQXBpLmdldE1vbnRoVHJlbmRSZXBvcnQoewogICAgICAgIG1vbnRoOiB0aGlzLm1vbnRoCiAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJlcykgewogICAgICAgIF90aGlzLmNoYXJ0RGF0YS5jb2x1bW5zLnB1c2goJ21vbnRoJyk7CgogICAgICAgIHJlcy5kYXRhLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgIHZhciByb3cgPSB7fTsKICAgICAgICAgIHJvdy5tb250aCA9IE9iamVjdC5rZXlzKGl0ZW0pWzBdOwogICAgICAgICAgaXRlbVtyb3cubW9udGhdLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0yKSB7CiAgICAgICAgICAgIGlmIChfdGhpcy5jaGFydERhdGEuY29sdW1ucy5pbmRleE9mKGl0ZW0yWydwcm9qTmFtZSddKSA8IDApIHsKICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnYm9vbGUnLCBpdGVtMlsncHJvak5hbWUnXS5pbmRleE9mKHRoaXMuY2hhcnREYXRhLmNvbHVtbnMpKQogICAgICAgICAgICAgIF90aGlzLmNoYXJ0RGF0YS5jb2x1bW5zLnB1c2goaXRlbTJbJ3Byb2pOYW1lJ10pOwogICAgICAgICAgICB9CgogICAgICAgICAgICByb3dbaXRlbTJbJ3Byb2pOYW1lJ11dID0gaXRlbTJbJ29mZmxpbmVCdWdSYXRlJ10gPyBpdGVtMlsnb2ZmbGluZUJ1Z1JhdGUnXSA6IDA7CiAgICAgICAgICB9KTsKCiAgICAgICAgICBfdGhpcy5jaGFydERhdGEucm93cy5wdXNoKHJvdyk7CiAgICAgICAgfSk7CiAgICAgICAgX3RoaXMuY2hhcnRTZXR0aW5ncy5zdGFjayA9IHsKICAgICAgICAgICfkuJrliqHnur8nOiBfdGhpcy5jaGFydERhdGEuY29sdW1ucwogICAgICAgIH07CiAgICAgICAgX3RoaXMubG9hZGluZyA9IGZhbHNlOwogICAgICB9KTsKICAgIH0KICB9Cn07"},{"version":3,"sources":["MonthTrendReport.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n<!--  <el-card>-->\n    <ve-line :data=\"chartData\" :settings=\"chartSettings\" :extend=\"extend\" v-loading=\"loading\"></ve-line>\n<!--  </el-card>-->\n</template>\n\n<script>\nimport jiraApi from '@/api/jira'\nexport default {\nname: \"MonthTrendReport\",\n  data() {\n    this.chartSettings = {\n      // stack: { '用户': ['访问用户', '下单用户'] },\n      area: true\n    }\n  return {\n      loading: false,\n      extend: {\n        tooltip: {\n          formatter: function (params) { // 提示内容太多隔行显示内容\n            let astr = ''\n            params.forEach((ele, index) => {\n              astr += `\n                  <div style=\"display: block;height:20px;${index % 2 === 0 ? 'width: 50%;' : 'width: 38%;'}float:left;\">\n                      <i style=\"width: 10px;height: 10px;display: inline-block;background: ${ele.color};border-radius: 10px;\"></i>\n                      <span>${ele.seriesName}: ${ele.data}</span>\n                  </div>\n              `\n            })\n            const b = '<div style=\"width: 500px;\">' + astr + '<div>'\n            return b\n          },\n          position: function (point) {\n            return [point[1], 0]\n          },\n        }\n      },\n      options: {\n        title: {\n          text: 'bug率月度趋势'\n        }\n      },\n    chartData: {\n      columns:[],\n      rows: []\n    },\n    // chartSettings: {\n    //   // stack: { '用户': ['访问用户', '下单用户'] },\n    //   area: true\n    // }\n  }\n  },\n  props: {\n    month: {type: String}\n  },\n  watch: {\n    month() {\n      this.getMonthTrend();\n\n    }\n  },\n  methods: {\n    getMonthTrend(){\n      this.chartData.columns = []\n      this.chartData.rows = []\n      this.loading = true\n      jiraApi.getMonthTrendReport({month: this.month}).then(res => {\n        this.chartData.columns.push('month')\n        res.data.forEach(item => {\n          let row = {}\n          row.month = Object.keys(item)[0];\n\n          item[row.month].forEach(item2 => {\n            if (this.chartData.columns.indexOf(item2['projName']) < 0){\n              // console.log('boole', item2['projName'].indexOf(this.chartData.columns))\n              this.chartData.columns.push(item2['projName'])\n            }\n            row[item2['projName']] = item2['offlineBugRate'] ? item2['offlineBugRate'] : 0\n          });\n          this.chartData.rows.push(row)\n        })\n        this.chartSettings.stack = { '业务线': this.chartData.columns };\n        this.loading = false\n\n      })\n    }\n  }\n}\n</script>\n\n<style scoped>\n\n</style>\n"],"sourceRoot":"src/pages/jira"}]}