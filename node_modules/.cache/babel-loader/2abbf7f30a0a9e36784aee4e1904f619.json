{"remainingRequest":"/Users/jlglqa/Documents/QA/noa/node_modules/babel-loader/lib/index.js!/Users/jlglqa/Documents/QA/noa/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/jlglqa/Documents/QA/noa/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jlglqa/Documents/QA/noa/src/pages/coverage/FullCoverageTrend.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jlglqa/Documents/QA/noa/src/pages/coverage/FullCoverageTrend.vue","mtime":1667355004158},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/cache-loader/dist/cjs.js","mtime":1644298102062},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/babel-loader/lib/index.js","mtime":1644314985388},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/cache-loader/dist/cjs.js","mtime":1644298102062},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/vue-loader/lib/index.js","mtime":1644314988580}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAuanMiOwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwppbXBvcnQgeyBjb3ZlcmFnZUFwaSB9IGZyb20gIkAvYXBpIjsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICJGdWxsQ292ZXJhZ2VUcmVuZCIsCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIGluUmVmcmVzaDogZmFsc2UsCiAgICAgIHByb2pJZDogJycsCiAgICAgIGNvbW1pdElkOiAnJywKICAgICAgcGlwZWxpbmVPcHRpb25zOiBbXSwKICAgICAgb3B0aW9uOiB7CiAgICAgICAgeEF4aXM6IHsKICAgICAgICAgIHR5cGU6ICdjYXRlZ29yeScsCiAgICAgICAgICBkYXRhOiBbXSwKICAgICAgICAgIGF4aXNMYWJlbDogewogICAgICAgICAgICBpbnRlcnZhbDogMCwKICAgICAgICAgICAgcm90YXRlOiAyNQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgdG9vbHRpcDogewogICAgICAgICAgdHJpZ2dlcjogJ2l0ZW0nLAogICAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiBmb3JtYXR0ZXIocGFyYW1zKSB7CiAgICAgICAgICAgIHJldHVybiBwYXJhbXMubmFtZTsKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIHlBeGlzOiB7CiAgICAgICAgICB0eXBlOiAndmFsdWUnLAogICAgICAgICAgYXhpc0xhYmVsOiB7CiAgICAgICAgICAgIGZvcm1hdHRlcjogJ3t2YWx1ZX0lJwogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgc2VyaWVzOiBbXQogICAgICB9CiAgICB9OwogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIGxvYWRpbmc6IGZ1bmN0aW9uIGxvYWRpbmcoKSB7CiAgICAgIHJldHVybiB0aGlzLiRzdG9yZS5zdGF0ZS5sb2FkaW5nOwogICAgfQogIH0sCiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCgpIHsKICAgIHRoaXMuZ2V0QWxsUGlwZWxpbmVzKCk7CiAgfSwKICBtZXRob2RzOiB7CiAgICBnZXRGdWxsQ292ZXJhZ2VUcmVuZDogZnVuY3Rpb24gZ2V0RnVsbENvdmVyYWdlVHJlbmQoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICB0aGlzLm9wdGlvbi5zZXJpZXMgPSBbXTsKICAgICAgdmFyIHBhcmFtcyA9IHsKICAgICAgICBwcm9qSWQ6IHRoaXMucHJvaklkLAogICAgICAgIGNvbW1pdElkOiB0aGlzLmNvbW1pdElkCiAgICAgIH07CiAgICAgIGNvdmVyYWdlQXBpLmdldEZ1bGxDb3ZlcmFnZVJlcG9ydFRyZW5kKHBhcmFtcykudGhlbihmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgX3RoaXMub3B0aW9uLnhBeGlzLmRhdGEgPSByZXMuZGF0YS54QXhpczsKCiAgICAgICAgX3RoaXMub3B0aW9uLnNlcmllcy5wdXNoKHsKICAgICAgICAgIHR5cGU6ICdsaW5lJywKICAgICAgICAgIGRhdGE6IHJlcy5kYXRhLnNlcmllcywKICAgICAgICAgIGxhYmVsOiB7CiAgICAgICAgICAgIHNob3c6IHRydWUsCiAgICAgICAgICAgIHBvc2l0aW9uOiAndG9wJywKICAgICAgICAgICAgZm9ybWF0dGVyOiAne2N9JScKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfSkuZmluYWxseShmdW5jdGlvbiAoKSB7CiAgICAgICAgLy8g5by65Yi25Yi35paw5Zu+6KGo77yM5riF6Zmk5Zu+6KGo5pi+56S657yT5a2YCiAgICAgICAgX3RoaXMuaW5SZWZyZXNoID0gZmFsc2U7CgogICAgICAgIF90aGlzLiRuZXh0VGljayhmdW5jdGlvbiAoKSB7CiAgICAgICAgICBfdGhpcy5pblJlZnJlc2ggPSB0cnVlOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0sCiAgICBnZXRBbGxQaXBlbGluZXM6IGZ1bmN0aW9uIGdldEFsbFBpcGVsaW5lcygpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICBjb3ZlcmFnZUFwaS5nZXRQaXBlbGluZUxpc3QoewogICAgICAgIG9mZnNldDogMCwKICAgICAgICBsaW1pdDogMTAwMAogICAgICB9KS50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICBfdGhpczIucHJvaklkID0gcmVzLmRhdGEuZGF0YVswXVsncHJvamVjdElkJ107CgogICAgICAgIF90aGlzMi5nZXRGdWxsQ292ZXJhZ2VUcmVuZCgpOwoKICAgICAgICBfdGhpczIucGlwZWxpbmVPcHRpb25zID0gcmVzLmRhdGEuZGF0YS5tYXAoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIHByb2plY3RJZDogaXRlbS5wcm9qZWN0SWQsCiAgICAgICAgICAgIG5hbWU6IGl0ZW0ubmFtZQogICAgICAgICAgfTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9CiAgfQp9Ow=="},{"version":3,"sources":["FullCoverageTrend.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,SAAA,WAAA,QAAA,OAAA;AACA,eAAA;AACA,EAAA,IAAA,EAAA,mBADA;AAEA,EAAA,IAFA,kBAEA;AACA,WAAA;AACA,MAAA,SAAA,EAAA,KADA;AAEA,MAAA,MAAA,EAAA,EAFA;AAGA,MAAA,QAAA,EAAA,EAHA;AAIA,MAAA,eAAA,EAAA,EAJA;AAKA,MAAA,MAAA,EAAA;AACA,QAAA,KAAA,EAAA;AACA,UAAA,IAAA,EAAA,UADA;AAEA,UAAA,IAAA,EAAA,EAFA;AAGA,UAAA,SAAA,EAAA;AACA,YAAA,QAAA,EAAA,CADA;AAEA,YAAA,MAAA,EAAA;AAFA;AAHA,SADA;AAQA,QAAA,OAAA,EAAA;AACA,UAAA,OAAA,EAAA,MADA;AAEA,UAAA,SAAA,EAAA,mBAAA,MAAA,EAAA;AACA,mBAAA,MAAA,CAAA,IAAA;AACA;AAJA,SARA;AAcA,QAAA,KAAA,EAAA;AACA,UAAA,IAAA,EAAA,OADA;AAEA,UAAA,SAAA,EAAA;AACA,YAAA,SAAA,EAAA;AADA;AAFA,SAdA;AAoBA,QAAA,MAAA,EAAA;AApBA;AALA,KAAA;AA4BA,GA/BA;AAgCA,EAAA,QAAA,EAAA;AACA,IAAA,OADA,qBACA;AACA,aAAA,KAAA,MAAA,CAAA,KAAA,CAAA,OAAA;AACA;AAHA,GAhCA;AAqCA,EAAA,OArCA,qBAqCA;AACA,SAAA,eAAA;AACA,GAvCA;AAwCA,EAAA,OAAA,EAAA;AACA,IAAA,oBADA,kCACA;AAAA;;AACA,WAAA,MAAA,CAAA,MAAA,GAAA,EAAA;AACA,UAAA,MAAA,GAAA;AACA,QAAA,MAAA,EAAA,KAAA,MADA;AAEA,QAAA,QAAA,EAAA,KAAA;AAFA,OAAA;AAIA,MAAA,WAAA,CAAA,0BAAA,CAAA,MAAA,EAAA,IAAA,CAAA,UAAA,GAAA,EAAA;AACA,QAAA,KAAA,CAAA,MAAA,CAAA,KAAA,CAAA,IAAA,GAAA,GAAA,CAAA,IAAA,CAAA,KAAA;;AACA,QAAA,KAAA,CAAA,MAAA,CAAA,MAAA,CAAA,IAAA,CAAA;AAAA,UAAA,IAAA,EAAA,MAAA;AAAA,UAAA,IAAA,EAAA,GAAA,CAAA,IAAA,CAAA,MAAA;AAAA,UAAA,KAAA,EAAA;AACA,YAAA,IAAA,EAAA,IADA;AAEA,YAAA,QAAA,EAAA,KAFA;AAGA,YAAA,SAAA,EAAA;AAHA;AAAA,SAAA;AAKA,OAPA,EAOA,OAPA,CAOA,YAAA;AACA;AACA,QAAA,KAAA,CAAA,SAAA,GAAA,KAAA;;AACA,QAAA,KAAA,CAAA,SAAA,CAAA,YAAA;AACA,UAAA,KAAA,CAAA,SAAA,GAAA,IAAA;AACA,SAFA;AAGA,OAbA;AAcA,KArBA;AAsBA,IAAA,eAtBA,6BAsBA;AAAA;;AACA,MAAA,WAAA,CAAA,eAAA,CAAA;AAAA,QAAA,MAAA,EAAA,CAAA;AAAA,QAAA,KAAA,EAAA;AAAA,OAAA,EAAA,IAAA,CAAA,UAAA,GAAA,EAAA;AACA,QAAA,MAAA,CAAA,MAAA,GAAA,GAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,EAAA,WAAA,CAAA;;AACA,QAAA,MAAA,CAAA,oBAAA;;AACA,QAAA,MAAA,CAAA,eAAA,GAAA,GAAA,CAAA,IAAA,CAAA,IAAA,CAAA,GAAA,CAAA,UAAA,IAAA,EAAA;AACA,iBAAA;AACA,YAAA,SAAA,EAAA,IAAA,CAAA,SADA;AAEA,YAAA,IAAA,EAAA,IAAA,CAAA;AAFA,WAAA;AAIA,SALA,CAAA;AAMA,OATA;AAUA;AAjCA;AAxCA,CAAA","sourcesContent":["<template>\n  <div>\n    <el-card>\n      <el-row>\n        <el-col :span=\"6\">\n          <el-select v-model=\"projId\" filterable style=\"width: 100%;padding-right: 5px\" @change=\"getFullCoverageTrend\">\n            <el-option v-for=\"item in pipelineOptions\"\n                       :key=\"item.projectId\"\n                       :value=\"item.projectId\"\n                       :label=\"item.name\"\n            ></el-option>\n          </el-select>\n        </el-col>\n        <el-col :span=\"6\">\n          <el-input v-model=\"commitId\" placeholder=\"选填commitId\" style=\"width: 100%;padding-right: 5px\"></el-input>\n        </el-col>\n        <el-col :span=\"3\">\n          <el-button type=\"primary\" round icon=\"el-icon-search\" @click=\"getFullCoverageTrend\"  style=\"float: left\">查询</el-button>\n        </el-col>\n      </el-row>\n    </el-card>\n    <el-card v-loading=\"loading\" style=\"margin-top: 15px\">\n      <chart  :autoresize=\"true\" :options=\"option\" class=\"e-chart\" v-if=\"inRefresh\"></chart>\n    </el-card>\n  </div>\n\n</template>\n\n<script>\nimport {coverageApi} from \"@/api\";\nexport default {\n  name: \"FullCoverageTrend\",\n  data() {\n    return {\n      inRefresh: false,\n      projId: '',\n      commitId: '',\n      pipelineOptions: [],\n      option: {\n        xAxis: {\n          type: 'category',\n          data:[],\n          axisLabel:{\n            interval: 0,\n            rotate: 25,\n          }},\n        tooltip: {\n          trigger: 'item',\n          formatter: function (params) {\n            return params.name;\n          }\n        },\n        yAxis: {\n          type: 'value',\n          axisLabel: {\n            formatter: '{value}%'\n          }\n        },\n        series: []\n      }\n      }\n    },\n  computed: {\n    loading() {\n      return this.$store.state.loading\n    },\n  },\n  created() {\n    this.getAllPipelines()\n  },\n  methods: {\n    getFullCoverageTrend() {\n      this.option.series = []\n      const params = {\n        projId: this.projId,\n        commitId: this.commitId\n      }\n      coverageApi.getFullCoverageReportTrend(params).then(res => {\n        this.option.xAxis.data = res.data.xAxis\n        this.option.series.push({type: 'line', data: res.data.series, label: {\n            show: true,\n            position: 'top',\n            formatter: '{c}%'\n          },})\n      }).finally(() => {\n        // 强制刷新图表，清除图表显示缓存\n        this.inRefresh = false;\n        this.$nextTick(() => {\n          this.inRefresh = true;\n        });\n      });\n    },\n    getAllPipelines() {\n      coverageApi.getPipelineList({offset: 0, limit: 1000}).then(res => {\n        this.projId = res.data.data[0]['projectId']\n        this.getFullCoverageTrend()\n        this.pipelineOptions = res.data.data.map(item => {\n          return {\n            projectId: item.projectId,\n            name: item.name,\n          }\n        })\n      })\n    }\n  }\n}\n</script>\n\n<style scoped lang=\"scss\">\n.e-chart {\n  width: 100%;\n  height: 500px;\n  margin: 0 auto\n}\n\n</style>\n"],"sourceRoot":"src/pages/coverage"}]}