{"remainingRequest":"/Users/jlglqa/Documents/QA/noa/node_modules/thread-loader/dist/cjs.js!/Users/jlglqa/Documents/QA/noa/node_modules/babel-loader/lib/index.js!/Users/jlglqa/Documents/QA/noa/node_modules/eslint-loader/index.js??ref--13-0!/Users/jlglqa/Documents/QA/noa/src/store/modules/coverage.js","dependencies":[{"path":"/Users/jlglqa/Documents/QA/noa/src/store/modules/coverage.js","mtime":1655949681825},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/cache-loader/dist/cjs.js","mtime":1644298102062},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/thread-loader/dist/cjs.js","mtime":1644298102066},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/babel-loader/lib/index.js","mtime":1644314985388},{"path":"/Users/jlglqa/Documents/QA/noa/node_modules/eslint-loader/index.js","mtime":1644298104993}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9Vc2Vycy9qbGdscWEvRG9jdW1lbnRzL1FBL25vYS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSAiL1VzZXJzL2psZ2xxYS9Eb2N1bWVudHMvUUEvbm9hL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eSI7Cgp2YXIgX211dGF0aW9uczsKCmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIjsKaW1wb3J0IHsgY292ZXJhZ2VBcGksIG9yZ2FuaXphdGlvbkFwaSB9IGZyb20gIkAvYXBpIjsKaW1wb3J0IHsgdHlwZUxhcmtDaGF0IH0gZnJvbSAiQC9hcGkvdHlwZXMvbGFyayI7CmV4cG9ydCB2YXIgU0VUX0dJVFBST0pFQ1QgPSAnU0VUX0dJVFBST0pFQ1QnOwpleHBvcnQgdmFyIFNFVF9DSEFUUyA9ICdTRVRfQ0hBVFMnOwpleHBvcnQgZGVmYXVsdCB7CiAgc3RhdGU6IHsKICAgIGdpdFByb2plY3RzOiBbXSwKICAgIGxhcmtDaGF0czogW3R5cGVMYXJrQ2hhdF0sCiAgICBzb2NrZXRJbmZvOiB7CiAgICAgIGdpdHByb2plY3RVcGRhdGU6IGZhbHNlLAogICAgICBsYXJrQ2hhdHNVcGRhdGU6IGZhbHNlCiAgICB9CiAgfSwKICBtdXRhdGlvbnM6IChfbXV0YXRpb25zID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfbXV0YXRpb25zLCBTRVRfR0lUUFJPSkVDVCwgZnVuY3Rpb24gKHN0YXRlLCBnaXRQcm9qZWN0cykgewogICAgc3RhdGUuZ2l0UHJvamVjdHMgPSBnaXRQcm9qZWN0czsKICAgIHN0YXRlLnNvY2tldEluZm8uZ2l0cHJvamVjdFVwZGF0ZSA9IHRydWU7CiAgfSksIF9kZWZpbmVQcm9wZXJ0eShfbXV0YXRpb25zLCBTRVRfQ0hBVFMsIGZ1bmN0aW9uIChzdGF0ZSwgbGFya0NoYXRzKSB7CiAgICBzdGF0ZS5sYXJrQ2hhdHMgPSBsYXJrQ2hhdHM7CiAgICBzdGF0ZS5zb2NrZXRJbmZvLmxhcmtDaGF0c1VwZGF0ZSA9IHRydWU7CiAgfSksIF9tdXRhdGlvbnMpLAogIGFjdGlvbnM6IHsKICAgIEdFVF9HSVRQUk9KRUNUOiBmdW5jdGlvbiBHRVRfR0lUUFJPSkVDVChfcmVmKSB7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgICAgdmFyIGNvbW1pdDsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBjb21taXQgPSBfcmVmLmNvbW1pdDsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzOwogICAgICAgICAgICAgICAgcmV0dXJuIGNvdmVyYWdlQXBpLmdldEFsbEdpdFByb2plY3RzKCkudGhlbihmdW5jdGlvbiAocmVzKSB7CiAgICAgICAgICAgICAgICAgIGNvbW1pdChTRVRfR0lUUFJPSkVDVCwgcmVzLmRhdGEpOwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBHRVRfTEFSS0NIQVRTOiBmdW5jdGlvbiBHRVRfTEFSS0NIQVRTKF9yZWYyKSB7CiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKCkgewogICAgICAgIHZhciBjb21taXQ7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWYyLmNvbW1pdDsKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMzsKICAgICAgICAgICAgICAgIHJldHVybiBvcmdhbml6YXRpb25BcGkuZ2V0TGFya1JvYm90Q2hhdHMoKS50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICAgICAgICAgICAgY29tbWl0KFNFVF9DSEFUUywgcmVzLmRhdGEpOwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMik7CiAgICAgIH0pKSgpOwogICAgfQogIH0KfTs="},{"version":3,"sources":["/Users/jlglqa/Documents/QA/noa/src/store/modules/coverage.js"],"names":["coverageApi","organizationApi","typeLarkChat","SET_GITPROJECT","SET_CHATS","state","gitProjects","larkChats","socketInfo","gitprojectUpdate","larkChatsUpdate","mutations","actions","GET_GITPROJECT","commit","getAllGitProjects","then","res","data","GET_LARKCHATS","getLarkRobotChats"],"mappings":";;;;;;AAAA,SAAQA,WAAR,EAAqBC,eAArB,QAA2C,OAA3C;AACA,SAAQC,YAAR,QAA2B,kBAA3B;AAEA,OAAO,IAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,IAAMC,SAAS,GAAG,WAAlB;AAEP,eAAe;AACbC,EAAAA,KAAK,EAAE;AACLC,IAAAA,WAAW,EAAE,EADR;AAELC,IAAAA,SAAS,EAAE,CAACL,YAAD,CAFN;AAGLM,IAAAA,UAAU,EAAE;AACVC,MAAAA,gBAAgB,EAAE,KADR;AAEVC,MAAAA,eAAe,EAAE;AAFP;AAHP,GADM;AASbC,EAAAA,SAAS,gDACNR,cADM,YACUE,KADV,EACiBC,WADjB,EAC8B;AACnCD,IAAAA,KAAK,CAACC,WAAN,GAAoBA,WAApB;AACAD,IAAAA,KAAK,CAACG,UAAN,CAAiBC,gBAAjB,GAAoC,IAApC;AACD,GAJM,+BAKNL,SALM,YAKKC,KALL,EAKYE,SALZ,EAKuB;AAC5BF,IAAAA,KAAK,CAACE,SAAN,GAAkBA,SAAlB;AACAF,IAAAA,KAAK,CAACG,UAAN,CAAiBE,eAAjB,GAAmC,IAAnC;AACD,GARM,cATI;AAmBbE,EAAAA,OAAO,EAAE;AACDC,IAAAA,cADC,gCACwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAATC,gBAAAA,MAAS,QAATA,MAAS;AAAA;AAAA,uBACvBd,WAAW,CAACe,iBAAZ,GACHC,IADG,CACE,UAAAC,GAAG,EAAI;AACXH,kBAAAA,MAAM,CAACX,cAAD,EAAiBc,GAAG,CAACC,IAArB,CAAN;AACD,iBAHG,CADuB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAK9B,KANM;AAODC,IAAAA,aAPC,gCAOuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAATL,gBAAAA,MAAS,SAATA,MAAS;AAAA;AAAA,uBACrBb,eAAe,CAACmB,iBAAhB,GAAoCJ,IAApC,CAAyC,UAAAC,GAAG,EAAI;AACrDH,kBAAAA,MAAM,CAACV,SAAD,EAAYa,GAAG,CAACC,IAAhB,CAAN;AACD,iBAFM,CADqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAI7B;AAXM;AAnBI,CAAf","sourcesContent":["import {coverageApi, organizationApi} from \"@/api\";\nimport {typeLarkChat} from \"@/api/types/lark\"\n\nexport const SET_GITPROJECT = 'SET_GITPROJECT'\nexport const SET_CHATS = 'SET_CHATS'\n\nexport default {\n  state: {\n    gitProjects: [],\n    larkChats: [typeLarkChat],\n    socketInfo: {\n      gitprojectUpdate: false,\n      larkChatsUpdate: false,\n    },\n  },\n  mutations: {\n    [SET_GITPROJECT](state, gitProjects) {\n      state.gitProjects = gitProjects\n      state.socketInfo.gitprojectUpdate = true\n    },\n    [SET_CHATS](state, larkChats) {\n      state.larkChats = larkChats\n      state.socketInfo.larkChatsUpdate = true\n    }\n  },\n  actions: {\n    async GET_GITPROJECT({commit}) {\n      await coverageApi.getAllGitProjects()\n        .then(res => {\n          commit(SET_GITPROJECT, res.data)\n        })\n    },\n    async GET_LARKCHATS({commit}) {\n      await  organizationApi.getLarkRobotChats().then(res => {\n        commit(SET_CHATS, res.data)\n      })\n    }\n  }\n}\n"]}]}